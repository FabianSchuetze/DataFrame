!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	documentation/html/search/searchdata.js	/^{$/;"	p	class:indexSectionLabels
0	documentation/html/search/searchdata.js	/^{$/;"	p	class:indexSectionNames
0	documentation/html/search/searchdata.js	/^{$/;"	p	class:indexSectionsWithContent
1	documentation/html/search/searchdata.js	/^  0: "All",$/;"	p	class:indexSectionLabels
1	documentation/html/search/searchdata.js	/^  0: "acdfgimost",$/;"	p	class:indexSectionsWithContent
1	documentation/html/search/searchdata.js	/^  0: "all",$/;"	p	class:indexSectionNames
2	documentation/html/search/searchdata.js	/^  1: "Classes",$/;"	p	class:indexSectionLabels
2	documentation/html/search/searchdata.js	/^  1: "cdgms",$/;"	p	class:indexSectionsWithContent
2	documentation/html/search/searchdata.js	/^  1: "classes",$/;"	p	class:indexSectionNames
3	documentation/html/search/searchdata.js	/^  2: "Functions",$/;"	p	class:indexSectionLabels
3	documentation/html/search/searchdata.js	/^  2: "acdfgimost",$/;"	p	class:indexSectionsWithContent
3	documentation/html/search/searchdata.js	/^  2: "functions",$/;"	p	class:indexSectionNames
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	416;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	419;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	422;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	429;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	431;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	433;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	437;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	440;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	443;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	448;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	451;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	454;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	459;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	462;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	465;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	468;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	401;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	404;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	407;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	410;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	414;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	416;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	418;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	422;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	425;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	428;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	433;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	436;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	439;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	444;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	447;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	450;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	453;"	d	file:
Activate	documentation/html/search/search.js	/^  this.Activate = function(isActive)$/;"	m	class:SearchBox
Arg	test/catch.hpp	/^    class Arg : public ParserRefImpl<Arg> {$/;"	c	namespace:Catch
AssertionInfo	test/catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AutoReg	test/catch.hpp	/^struct AutoReg : NonCopyable {$/;"	s	namespace:Catch
BENCHMARK	test/catch.hpp	2811;"	d
CATCH_ARC_ENABLED	test/catch.hpp	1369;"	d
CATCH_ARC_STRONG	test/catch.hpp	1387;"	d
CATCH_ARC_STRONG	test/catch.hpp	1403;"	d
CATCH_BREAK_INTO_DEBUGGER	test/catch.hpp	6262;"	d
CATCH_CATCH_ALL	test/catch.hpp	380;"	d
CATCH_CATCH_ANON	test/catch.hpp	381;"	d
CATCH_CLARA_CONFIG_CONSOLE_WIDTH	test/catch.hpp	6751;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	test/catch.hpp	6728;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	test/catch.hpp	6730;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	test/catch.hpp	6755;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	test/catch.hpp	6785;"	d
CATCH_CONFIG_ALL_PARTS	test/catch.hpp	51;"	d
CATCH_CONFIG_COLOUR_NONE	test/catch.hpp	182;"	d
CATCH_CONFIG_COLOUR_NONE	test/catch.hpp	231;"	d
CATCH_CONFIG_CONSOLE_WIDTH	test/catch.hpp	4874;"	d
CATCH_CONFIG_COUNTER	test/catch.hpp	311;"	d
CATCH_CONFIG_CPP11_TO_STRING	test/catch.hpp	326;"	d
CATCH_CONFIG_CPP17_OPTIONAL	test/catch.hpp	330;"	d
CATCH_CONFIG_CPP17_STRING_VIEW	test/catch.hpp	338;"	d
CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	test/catch.hpp	334;"	d
CATCH_CONFIG_CPP17_VARIANT	test/catch.hpp	342;"	d
CATCH_CONFIG_DEFAULT_REPORTER	test/catch.hpp	4910;"	d
CATCH_CONFIG_DEFAULT_REPORTER	test/catch.hpp	4913;"	d
CATCH_CONFIG_DISABLE_EXCEPTIONS	test/catch.hpp	354;"	d
CATCH_CONFIG_DISABLE_MATCHERS	test/catch.hpp	59;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	test/catch.hpp	1733;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	test/catch.hpp	62;"	d
CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER	test/catch.hpp	1734;"	d
CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER	test/catch.hpp	1730;"	d
CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER	test/catch.hpp	1731;"	d
CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER	test/catch.hpp	1732;"	d
CATCH_CONFIG_EXTERNAL_INTERFACES	test/catch.hpp	57;"	d
CATCH_CONFIG_MAIN	test/test.cpp	1;"	d	file:
CATCH_CONFIG_NEW_CAPTURE	test/catch.hpp	350;"	d
CATCH_CONFIG_NO_CPP17_VARIANT	test/catch.hpp	300;"	d
CATCH_CONFIG_POLYFILL_ISNAN	test/catch.hpp	358;"	d
CATCH_CONFIG_POSIX_SIGNALS	test/catch.hpp	318;"	d
CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	test/catch.hpp	389;"	d
CATCH_CONFIG_WCHAR	test/catch.hpp	322;"	d
CATCH_CONFIG_WINDOWS_SEH	test/catch.hpp	314;"	d
CATCH_CPP14_OR_GREATER	test/catch.hpp	126;"	d
CATCH_CPP17_OR_GREATER	test/catch.hpp	130;"	d
CATCH_DEFER	test/catch.hpp	696;"	d
CATCH_DEFINED_NOMINMAX	test/catch.hpp	6278;"	d
CATCH_DEFINED_WIN32_LEAN_AND_MEAN	test/catch.hpp	6282;"	d
CATCH_EMPTY	test/catch.hpp	695;"	d
CATCH_ENFORCE	test/catch.hpp	3704;"	d
CATCH_ERROR	test/catch.hpp	3700;"	d
CATCH_IMPL	test/catch.hpp	50;"	d
CATCH_INTERNAL_CONFIG_COUNTER	test/catch.hpp	271;"	d
CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL	test/catch.hpp	287;"	d
CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW	test/catch.hpp	279;"	d
CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	test/catch.hpp	136;"	d
CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS	test/catch.hpp	225;"	d
CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED	test/catch.hpp	248;"	d
CATCH_INTERNAL_CONFIG_NEW_CAPTURE	test/catch.hpp	346;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	test/catch.hpp	188;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	test/catch.hpp	215;"	d
CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE	test/catch.hpp	200;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	test/catch.hpp	177;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	test/catch.hpp	181;"	d
CATCH_INTERNAL_CONFIG_NO_WCHAR	test/catch.hpp	254;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	test/catch.hpp	194;"	d
CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN	test/catch.hpp	260;"	d
CATCH_INTERNAL_CONFIG_POSIX_SIGNALS	test/catch.hpp	171;"	d
CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	test/catch.hpp	240;"	d
CATCH_INTERNAL_ERROR	test/catch.hpp	3698;"	d
CATCH_INTERNAL_LINEINFO	test/catch.hpp	468;"	d
CATCH_INTERNAL_STRINGIFY	test/catch.hpp	2509;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	test/catch.hpp	141;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	test/catch.hpp	366;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	test/catch.hpp	148;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	test/catch.hpp	362;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	test/catch.hpp	154;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	test/catch.hpp	370;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	test/catch.hpp	160;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	test/catch.hpp	374;"	d
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS	test/catch.hpp	145;"	d
CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS	test/catch.hpp	367;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	test/catch.hpp	151;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	test/catch.hpp	363;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS	test/catch.hpp	157;"	d
CATCH_INTERNAL_UNSUPPRESS_UNUSED_WARNINGS	test/catch.hpp	371;"	d
CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS	test/catch.hpp	163;"	d
CATCH_INTERNAL_UNSUPPRESS_ZERO_VARIADIC_WARNINGS	test/catch.hpp	375;"	d
CATCH_PLATFORM_IPHONE	test/catch.hpp	74;"	d
CATCH_PLATFORM_LINUX	test/catch.hpp	78;"	d
CATCH_PLATFORM_MAC	test/catch.hpp	72;"	d
CATCH_PLATFORM_WINDOWS	test/catch.hpp	7115;"	d
CATCH_PLATFORM_WINDOWS	test/catch.hpp	81;"	d
CATCH_PREPARE_EXCEPTION	test/catch.hpp	3696;"	d
CATCH_RECURSE	test/catch.hpp	687;"	d
CATCH_RECURSION_LEVEL0	test/catch.hpp	676;"	d
CATCH_RECURSION_LEVEL1	test/catch.hpp	677;"	d
CATCH_RECURSION_LEVEL2	test/catch.hpp	678;"	d
CATCH_RECURSION_LEVEL3	test/catch.hpp	679;"	d
CATCH_RECURSION_LEVEL4	test/catch.hpp	680;"	d
CATCH_RECURSION_LEVEL5	test/catch.hpp	681;"	d
CATCH_RECURSION_LEVEL6	test/catch.hpp	686;"	d
CATCH_REC_END	test/catch.hpp	692;"	d
CATCH_REC_GET_END	test/catch.hpp	700;"	d
CATCH_REC_GET_END1	test/catch.hpp	699;"	d
CATCH_REC_GET_END2	test/catch.hpp	698;"	d
CATCH_REC_LIST	test/catch.hpp	718;"	d
CATCH_REC_LIST0	test/catch.hpp	705;"	d
CATCH_REC_LIST0_UD	test/catch.hpp	709;"	d
CATCH_REC_LIST1	test/catch.hpp	706;"	d
CATCH_REC_LIST1_UD	test/catch.hpp	710;"	d
CATCH_REC_LIST2	test/catch.hpp	707;"	d
CATCH_REC_LIST2_UD	test/catch.hpp	711;"	d
CATCH_REC_LIST_UD	test/catch.hpp	716;"	d
CATCH_REC_NEXT	test/catch.hpp	703;"	d
CATCH_REC_NEXT0	test/catch.hpp	701;"	d
CATCH_REC_NEXT1	test/catch.hpp	702;"	d
CATCH_REC_OUT	test/catch.hpp	693;"	d
CATCH_REGISTER_ENUM	test/catch.hpp	2032;"	d
CATCH_REGISTER_LISTENER	test/catch.hpp	5674;"	d
CATCH_REGISTER_REPORTER	test/catch.hpp	5669;"	d
CATCH_REGISTER_TAG_ALIAS	test/catch.hpp	480;"	d
CATCH_RUNTIME_ERROR	test/catch.hpp	3702;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	test/catch.hpp	6727;"	d
CATCH_TRAP	test/catch.hpp	6241;"	d
CATCH_TRY	test/catch.hpp	379;"	d
CATCH_UNSAFE_UNRETAINED	test/catch.hpp	1386;"	d
CATCH_UNSAFE_UNRETAINED	test/catch.hpp	1402;"	d
CATCH_VERSION_MAJOR	test/catch.hpp	16;"	d
CATCH_VERSION_MINOR	test/catch.hpp	17;"	d
CATCH_VERSION_PATCH	test/catch.hpp	18;"	d
CLARA_CONFIG_MAIN	test/catch.hpp	89;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	test/catch.hpp	88;"	d
CLARA_CONFIG_OPTIONAL_TYPE	test/catch.hpp	6762;"	d
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/fabian\/Documents\/work\/DataFrame\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/fabian\/Documents\/work\/DataFrame$/;"	m
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	218;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	236;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	251;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	264;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	282;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	285;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	288;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	115;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	13;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	198;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	19;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	216;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	225;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	234;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	249;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	267;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	270;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	273;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	50;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	62;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	94;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	232;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	230;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	180;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	191;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	221;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	229;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	244;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	253;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	258;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	267;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	272;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	96;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	130;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	144;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	186;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	188;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	219;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	227;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	237;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	242;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	252;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	257;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	88;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	166;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	181;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	203;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	222;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	240;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	245;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	259;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	268;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	273;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	97;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	118;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	139;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	160;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	228;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	243;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	258;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	97;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	207;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	210;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	223;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	231;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	241;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	246;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	255;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	269;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	274;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	176;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	221;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	239;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	254;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	259;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	214;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	212;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
CXX_STD	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	534;"	d	file:
CXX_STD	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	536;"	d	file:
C_DIALECT	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	550;"	d	file:
C_DIALECT	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	552;"	d	file:
C_DIALECT	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	555;"	d	file:
C_DIALECT	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	557;"	d	file:
C_DIALECT	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	559;"	d	file:
CaseSensitive	test/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
Catch	test/catch.hpp	/^namespace Catch {$/;"	n
Catch	test/catch.hpp	/^namespace Catch{$/;"	n
Catch_global_namespace_dummy	test/catch.hpp	/^struct Catch_global_namespace_dummy {};$/;"	s
Choice	test/catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Class Documentation	documentation/latex/refman.tex	/^\\input{annotated}$/;"	c
Class Hierarchy	documentation/latex/hierarchy.tex	/^\\section{Class Hierarchy}$/;"	s
Class Index	documentation/latex/refman.tex	/^\\input{hierarchy}$/;"	c
Class List	documentation/latex/annotated.tex	/^\\section{Class List}$/;"	s
Classes	documentation/latex/classDataFrame.tex	/^{\\ttfamily \\#include $<$dataframe.\\+h$>$}$/;"	u
CloseResultsWindow	documentation/html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m	class:SearchBox
CloseSelectionWindow	documentation/html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m	class:SearchBox
Column	dataframe/column.cpp	/^Column::Column(const Column& c, const deque<int>& subsets) {$/;"	f	class:Column
Column	dataframe/column.h	/^    Column(): col() {};$/;"	f	class:Column
Column	dataframe/column.h	/^    explicit Column(const std::vector<T>& t): col(t) {}$/;"	f	class:Column
Column	dataframe/column.h	/^class Column {$/;"	c
Column Class Reference	documentation/latex/classColumn.tex	/^\\hypertarget{classColumn}{}\\section{Column Class Reference}$/;"	s
ColumnIterator	dataframe/ColumnIterator.h	/^        ColumnIterator(DataFrame& a, int n, size_t sz=0):$/;"	f	class:DataFrame::ColumnIterator
ColumnIterator	dataframe/ColumnIterator.h	/^class DataFrame::ColumnIterator {$/;"	c	class:DataFrame
ComposableParserImpl	test/catch.hpp	/^    class ComposableParserImpl : public ParserBase {$/;"	c	namespace:Catch
ConstColumnIterator	dataframe/ConstColumnIterator.h	/^    ConstColumnIterator(const DataFrame& a, int n, size_t sz = 0)$/;"	f	class:DataFrame::ConstColumnIterator
ConstColumnIterator	dataframe/ConstColumnIterator.h	/^class DataFrame::ConstColumnIterator {$/;"	c	class:DataFrame
ContinueOnFailure	test/catch.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
DEC	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	472;"	d	file:
DEC	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	457;"	d	file:
DOMPopupSearchResults	documentation/html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m	class:SearchBox
DOMPopupSearchResultsWindow	documentation/html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m	class:SearchBox
DOMSearchBox	documentation/html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m	class:SearchBox
DOMSearchClose	documentation/html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m	class:SearchBox
DOMSearchField	documentation/html/search/search.js	/^  this.DOMSearchField = function()$/;"	m	class:SearchBox
DOMSearchSelect	documentation/html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m	class:SearchBox
DOMSearchSelectWindow	documentation/html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m	class:SearchBox
Data   Frame       Column   Iterator$  $ T $  $ Class Template Reference	documentation/latex/classDataFrame_1_1ColumnIterator.tex	/^\\hypertarget{classDataFrame_1_1ColumnIterator}{}\\section{Data\\+Frame\\+:\\+:Column\\+Iterator$<$ T $>$ Class Template Reference}$/;"	s
Data   Frame       Const   Column   Iterator$  $ T $  $ Class Template Reference	documentation/latex/classDataFrame_1_1ConstColumnIterator.tex	/^\\hypertarget{classDataFrame_1_1ConstColumnIterator}{}\\section{Data\\+Frame\\+:\\+:Const\\+Column\\+Iterator$<$ T $>$ Class Template Reference}$/;"	s
Data   Frame       Data   Frame   Proxy Class Reference	documentation/latex/classDataFrame_1_1DataFrameProxy.tex	/^\\hypertarget{classDataFrame_1_1DataFrameProxy}{}\\section{Data\\+Frame\\+:\\+:Data\\+Frame\\+Proxy Class Reference}$/;"	s
Data   Frame       Grouper$  $ T $  $ Class Template Reference	documentation/latex/classDataFrame_1_1Grouper.tex	/^\\hypertarget{classDataFrame_1_1Grouper}{}\\section{Data\\+Frame\\+:\\+:Grouper$<$ T $>$ Class Template Reference}$/;"	s
Data   Frame Class Reference	documentation/latex/classDataFrame.tex	/^\\hypertarget{classDataFrame}{}\\section{Data\\+Frame Class Reference}$/;"	s
DataFrame	dataframe/dataframe.cpp	/^DataFrame::DataFrame()$/;"	f	class:DataFrame
DataFrame	dataframe/dataframe.cpp	/^DataFrame::DataFrame(const DataFrame::DataFrameProxy& df)$/;"	f	class:DataFrame
DataFrame	dataframe/dataframe.cpp	/^DataFrame::DataFrame(const vector<string>& idx, const vector<string>& n,$/;"	f	class:DataFrame
DataFrame	dataframe/dataframe.cpp	/^DataFrame::DataFrame(std::ifstream& file)$/;"	f	class:DataFrame
DataFrame	dataframe/dataframe.h	/^class DataFrame {$/;"	c
DataFrameProxy	dataframe/dataframeproxy.cpp	/^DataFrame::DataFrameProxy::DataFrameProxy(DataFrame& df, const string& s)$/;"	f	class:DataFrame::DataFrameProxy
DataFrameProxy	dataframe/dataframeproxy.cpp	/^DataFrame::DataFrameProxy::DataFrameProxy(DataFrame& df, const vector<string>& s)$/;"	f	class:DataFrame::DataFrameProxy
DataFrameProxy	dataframe/dataframeproxy.h	/^class DataFrame::DataFrameProxy {$/;"	c	class:DataFrame
Detail	test/catch.hpp	/^    namespace Detail {$/;"	n	namespace:Catch
Detailed Description	documentation/latex/classDataFrame.tex	/^\\begin{DoxyCompactList}\\small\\item\\em adds a value of type T to the dataframe. \\end{DoxyCompactList}\\end{DoxyCompactItemize}$/;"	u
DidntThrowException	test/catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EnumInfo	test/catch.hpp	/^        struct EnumInfo {$/;"	s	namespace:Catch::Detail
Exception	test/catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
ExeName	test/catch.hpp	/^        ExeName() : m_name( std::make_shared<std::string>( "<executable>" ) ) {}$/;"	f	class:Catch::ExeName
ExeName	test/catch.hpp	/^        explicit ExeName( LambdaT const& lambda ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	test/catch.hpp	/^        explicit ExeName( std::string &ref ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	test/catch.hpp	/^    class ExeName : public ComposableParserImpl<ExeName> {$/;"	c	namespace:Catch
ExplicitFailure	test/catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	test/catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
FailureBit	test/catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FalseTest	test/catch.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FatalErrorCondition	test/catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
FindChildElement	documentation/html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m	class:SearchResults
Flags	test/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
Friends	documentation/latex/classColumn.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	documentation/latex/classDataFrame.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	documentation/latex/classDataFrame_1_1ColumnIterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	documentation/latex/classDataFrame_1_1ConstColumnIterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends	documentation/latex/classDataFrame_1_1DataFrameProxy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Friends And Related Function Documentation	documentation/latex/classColumn.tex	/^Returns the type of the stored data as a string $/;"	u
Friends And Related Function Documentation	documentation/latex/classDataFrame.tex	/^If a colum or row or the rhs is not present in the lhs, a new column or row is created in the lhs dataframe contains nas. $/;"	u
GENERATE	test/catch.hpp	3896;"	d
GENERATE_COPY	test/catch.hpp	3898;"	d
GENERATE_REF	test/catch.hpp	3900;"	d
GUARD_ColumnIterator_h	dataframe/ColumnIterator.h	2;"	d
GUARD_Column_h	dataframe/column.h	2;"	d
GUARD_ConstColumnIterator_h	dataframe/ConstColumnIterator.h	2;"	d
GUARD_DataFrameProxy_h	dataframe/dataframeproxy.h	2;"	d
GUARD_GroupbyFunctions_h	dataframe/GroupbyFunctions.h	2;"	d
GUARD_Grouper_h	dataframe/grouper.h	2;"	d
GUARD_dataframe_h	dataframe/dataframe.h	2;"	d
GUARD_index_h	dataframe/index.h	2;"	d
Grouper	dataframe/grouper.cpp	/^DataFrame::Grouper<T>::Grouper(DataFrame& a)$/;"	f	class:DataFrame::Grouper
Grouper	dataframe/grouper.cpp	/^DataFrame::Grouper<T>::Grouper(DataFrame& a, const std::string& s)$/;"	f	class:DataFrame::Grouper
Grouper	dataframe/grouper.h	/^class DataFrame::Grouper {$/;"	c	class:DataFrame
HEX	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	483;"	d	file:
HEX	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	468;"	d	file:
Help	test/catch.hpp	/^        Help( bool &showHelpFlag )$/;"	f	struct:Catch::Help
Help	test/catch.hpp	/^    struct Help : Opt {$/;"	s	namespace:Catch
Hierarchical Index	documentation/latex/refman.tex	/^\\hypersetup{pageanchor=true}$/;"	c
ID_VOID_MAIN	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
IMutableEnumValuesRegistry	test/catch.hpp	/^    struct IMutableEnumValuesRegistry {$/;"	s	namespace:Catch
INTERNAL_CATCH_CAPTURE	test/catch.hpp	2614;"	d
INTERNAL_CATCH_CATCH	test/catch.hpp	2520;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	test/catch.hpp	868;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST0	test/catch.hpp	795;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST1	test/catch.hpp	796;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	test/catch.hpp	864;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0	test/catch.hpp	839;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1	test/catch.hpp	840;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X	test/catch.hpp	846;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_X	test/catch.hpp	799;"	d
INTERNAL_CATCH_DEF	test/catch.hpp	722;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	test/catch.hpp	867;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST0	test/catch.hpp	803;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST1	test/catch.hpp	804;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	test/catch.hpp	863;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0	test/catch.hpp	852;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1	test/catch.hpp	853;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X	test/catch.hpp	856;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_X	test/catch.hpp	807;"	d
INTERNAL_CATCH_DYNAMIC_SECTION	test/catch.hpp	2763;"	d
INTERNAL_CATCH_ELSE	test/catch.hpp	2550;"	d
INTERNAL_CATCH_EXPAND1	test/catch.hpp	720;"	d
INTERNAL_CATCH_EXPAND2	test/catch.hpp	721;"	d
INTERNAL_CATCH_EXPAND_VARGS	test/catch.hpp	684;"	d
INTERNAL_CATCH_IF	test/catch.hpp	2545;"	d
INTERNAL_CATCH_INFO	test/catch.hpp	2619;"	d
INTERNAL_CATCH_MAKE_NAMESPACE	test/catch.hpp	736;"	d
INTERNAL_CATCH_MAKE_NAMESPACE2	test/catch.hpp	735;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	test/catch.hpp	742;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	test/catch.hpp	741;"	d
INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES	test/catch.hpp	748;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	test/catch.hpp	992;"	d
INTERNAL_CATCH_MSG	test/catch.hpp	2606;"	d
INTERNAL_CATCH_NOINTERNAL_CATCH_DEF	test/catch.hpp	723;"	d
INTERNAL_CATCH_NO_THROW	test/catch.hpp	2555;"	d
INTERNAL_CATCH_NTTP_0	test/catch.hpp	861;"	d
INTERNAL_CATCH_NTTP_1	test/catch.hpp	783;"	d
INTERNAL_CATCH_NTTP_GEN	test/catch.hpp	862;"	d
INTERNAL_CATCH_NTTP_REGISTER	test/catch.hpp	818;"	d
INTERNAL_CATCH_NTTP_REGISTER0	test/catch.hpp	811;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD	test/catch.hpp	832;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD0	test/catch.hpp	825;"	d
INTERNAL_CATCH_NTTP_REG_GEN	test/catch.hpp	866;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	test/catch.hpp	865;"	d
INTERNAL_CATCH_REACT	test/catch.hpp	2529;"	d
INTERNAL_CATCH_REGISTER_ENUM	test/catch.hpp	2022;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	test/catch.hpp	1012;"	d
INTERNAL_CATCH_REMOVE_PARENS	test/catch.hpp	738;"	d
INTERNAL_CATCH_REMOVE_PARENS_10_ARG	test/catch.hpp	760;"	d
INTERNAL_CATCH_REMOVE_PARENS_11_ARG	test/catch.hpp	761;"	d
INTERNAL_CATCH_REMOVE_PARENS_1_ARG	test/catch.hpp	751;"	d
INTERNAL_CATCH_REMOVE_PARENS_2_ARG	test/catch.hpp	752;"	d
INTERNAL_CATCH_REMOVE_PARENS_3_ARG	test/catch.hpp	753;"	d
INTERNAL_CATCH_REMOVE_PARENS_4_ARG	test/catch.hpp	754;"	d
INTERNAL_CATCH_REMOVE_PARENS_5_ARG	test/catch.hpp	755;"	d
INTERNAL_CATCH_REMOVE_PARENS_6_ARG	test/catch.hpp	756;"	d
INTERNAL_CATCH_REMOVE_PARENS_7_ARG	test/catch.hpp	757;"	d
INTERNAL_CATCH_REMOVE_PARENS_8_ARG	test/catch.hpp	758;"	d
INTERNAL_CATCH_REMOVE_PARENS_9_ARG	test/catch.hpp	759;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	test/catch.hpp	869;"	d
INTERNAL_CATCH_SECTION	test/catch.hpp	2758;"	d
INTERNAL_CATCH_STRINGIZE	test/catch.hpp	724;"	d
INTERNAL_CATCH_STRINGIZE2	test/catch.hpp	726;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	test/catch.hpp	727;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE	test/catch.hpp	1095;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2	test/catch.hpp	1062;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD	test/catch.hpp	1190;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2	test/catch.hpp	1154;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG	test/catch.hpp	1198;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG	test/catch.hpp	1103;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE	test/catch.hpp	1047;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_2	test/catch.hpp	1018;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD	test/catch.hpp	1139;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2	test/catch.hpp	1110;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION	test/catch.hpp	965;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2	test/catch.hpp	940;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG	test/catch.hpp	1147;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION	test/catch.hpp	973;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION	test/catch.hpp	949;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2	test/catch.hpp	938;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG	test/catch.hpp	1055;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION	test/catch.hpp	957;"	d
INTERNAL_CATCH_TEST	test/catch.hpp	2532;"	d
INTERNAL_CATCH_TESTCASE	test/catch.hpp	988;"	d
INTERNAL_CATCH_TESTCASE2	test/catch.hpp	982;"	d
INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION	test/catch.hpp	931;"	d
INTERNAL_CATCH_TESTCASE_NO_REGISTRATION	test/catch.hpp	929;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	test/catch.hpp	1008;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	test/catch.hpp	998;"	d
INTERNAL_CATCH_THROWS	test/catch.hpp	2569;"	d
INTERNAL_CATCH_THROWS_AS	test/catch.hpp	2586;"	d
INTERNAL_CATCH_THROWS_MATCHES	test/catch.hpp	3624;"	d
INTERNAL_CATCH_THROWS_STR_MATCHES	test/catch.hpp	2628;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	test/catch.hpp	2935;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	test/catch.hpp	2928;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG	test/catch.hpp	2868;"	d
INTERNAL_CATCH_TRY	test/catch.hpp	2519;"	d
INTERNAL_CATCH_TYPE_GEN	test/catch.hpp	765;"	d
INTERNAL_CATCH_UNIQUE_NAME	test/catch.hpp	396;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	test/catch.hpp	394;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	test/catch.hpp	393;"	d
INTERNAL_CATCH_UNSCOPED_INFO	test/catch.hpp	2623;"	d
INTERNAL_CATCH_VA_NARGS_IMPL	test/catch.hpp	763;"	d
INTERNAL_CHECK_THAT	test/catch.hpp	3614;"	d
IStream	test/catch.hpp	/^    struct IStream {$/;"	s	namespace:Catch
ITestCaseRegistry	test/catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestInvoker	test/catch.hpp	/^    struct ITestInvoker {$/;"	s	namespace:Catch
Index	dataframe/index.h	/^    Index() : index_positions(), index_names(){};$/;"	f	class:Index
Index	dataframe/index.h	/^class Index {$/;"	c
Info	test/catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
InternalParseResult	test/catch.hpp	/^        virtual auto parse( std::string const& exeName, TokenStream const &tokens) const -> InternalParseResult  = 0;$/;"	m	namespace:Catch::Detail
IsStreamInsertable	test/catch.hpp	/^        class IsStreamInsertable {$/;"	c	namespace:Catch::Detail
Member Function Documentation	documentation/latex/classColumn.tex	/^\\end{DoxyCompactItemize}$/;"	u
Member Function Documentation	documentation/latex/classDataFrame.tex	/^A test class. A more elaborate class description. $/;"	u
NOMINMAX	test/catch.hpp	6279;"	d
NOMINMAX	test/catch.hpp	6293;"	d
NameAndTags	test/catch.hpp	/^struct NameAndTags {$/;"	s	namespace:Catch
Nav	documentation/html/search/search.js	/^    this.Nav = function(evt,itemIndex)$/;"	m	class:SearchResults
NavChild	documentation/html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m	class:SearchResults
NavNext	documentation/html/search/search.js	/^    this.NavNext = function(index)$/;"	m	class:SearchResults
NavPrev	documentation/html/search/search.js	/^    this.NavPrev = function(index)$/;"	m	class:SearchResults
No	test/catch.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
NonCopyable	test/catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
Normal	test/catch.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
OC_MAKE_UNIQUE_NAME	test/catch.hpp	4662;"	d
OC_TEST_CASE	test/catch.hpp	4674;"	d
OC_TEST_CASE2	test/catch.hpp	4663;"	d
OfType	test/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
Ok	test/catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
OnSearchFieldChange	documentation/html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m	class:SearchBox
OnSearchFieldFocus	documentation/html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m	class:SearchBox
OnSearchSelectHide	documentation/html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m	class:SearchBox
OnSearchSelectKey	documentation/html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m	class:SearchBox
OnSearchSelectShow	documentation/html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m	class:SearchBox
OnSelectItem	documentation/html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m	class:SearchBox
Opt	test/catch.hpp	/^        Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	test/catch.hpp	/^        Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	test/catch.hpp	/^        explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	test/catch.hpp	/^        explicit Opt( bool &ref ) : ParserRefImpl( std::make_shared<BoundFlagRef>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	test/catch.hpp	/^    class Opt : public ParserRefImpl<Opt> {$/;"	c	namespace:Catch
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	313;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	316;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	319;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	322;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	325;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	328;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	331;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	334;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	337;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	355;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	358;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	361;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	373;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	376;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	379;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	382;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	385;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	389;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	392;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	395;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	398;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	401;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	405;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	298;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	301;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	304;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	307;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	310;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	313;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	316;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	319;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	322;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	325;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	331;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	334;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	337;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	340;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	343;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	346;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	349;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	352;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	355;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	358;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	361;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	364;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	367;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	370;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	374;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	377;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	380;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	383;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	386;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	390;"	d	file:
Parser	test/catch.hpp	/^        auto operator+( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	test/catch.hpp	/^        auto operator|( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	test/catch.hpp	/^    struct Parser : ParserBase {$/;"	s	namespace:Catch
ParserRefImpl	test/catch.hpp	/^        ParserRefImpl( LambdaT const &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	test/catch.hpp	/^        ParserRefImpl( T &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	test/catch.hpp	/^        explicit ParserRefImpl( std::shared_ptr<BoundRef> const &ref ) : m_ref( ref ) {}$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	test/catch.hpp	/^    class ParserRefImpl : public ComposableParserImpl<DerivedT> {$/;"	c	namespace:Catch
Private Attributes	documentation/latex/classColumn.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Attributes	documentation/latex/classDataFrame.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Attributes	documentation/latex/classDataFrame_1_1ColumnIterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Attributes	documentation/latex/classDataFrame_1_1ConstColumnIterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Attributes	documentation/latex/classDataFrame_1_1DataFrameProxy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Attributes	documentation/latex/classDataFrame_1_1Grouper.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Member Functions	documentation/latex/classColumn.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Member Functions	documentation/latex/classDataFrame.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Member Functions	documentation/latex/classDataFrame_1_1ColumnIterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Member Functions	documentation/latex/classDataFrame_1_1ConstColumnIterator.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Member Functions	documentation/latex/classDataFrame_1_1DataFrameProxy.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Member Functions	documentation/latex/classDataFrame_1_1Grouper.tex	/^\\end{DoxyCompactItemize}$/;"	u
Private Types	documentation/latex/classColumn.tex	/^\\end{DoxyCompactItemize}$/;"	u
ProcessKeys	documentation/html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m	class:SearchResults
Protected Attributes	documentation/latex/classStatistic.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	documentation/latex/classColumn.tex	/^\\label{classColumn}\\index{Column@{Column}}$/;"	u
Public Member Functions	documentation/latex/classDataFrame.tex	/^\\end{DoxyCompactItemize}$/;"	u
Public Member Functions	documentation/latex/classDataFrame_1_1ColumnIterator.tex	/^\\end{figure}$/;"	u
Public Member Functions	documentation/latex/classDataFrame_1_1ConstColumnIterator.tex	/^\\end{figure}$/;"	u
Public Member Functions	documentation/latex/classDataFrame_1_1DataFrameProxy.tex	/^\\end{figure}$/;"	u
Public Member Functions	documentation/latex/classDataFrame_1_1Grouper.tex	/^Collaboration diagram for Data\\+Frame\\+:\\+:Grouper$<$ T $>$\\+:$/;"	u
Public Member Functions	documentation/latex/classStatistic.tex	/^Collaboration diagram for Statistic\\+:$/;"	u
Public Member Functions	documentation/latex/classmean.tex	/^Collaboration diagram for mean\\+:$/;"	u
Public Types	documentation/latex/classDataFrame.tex	/^\\end{DoxyCompactItemize}$/;"	u
Questions	documentation/latex/md_README.tex	/^What datastructure do I want for the data objects. Can I use matrices??$/;"	u
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RegistrarForTagAliases	test/catch.hpp	/^    struct RegistrarForTagAliases {$/;"	s	namespace:Catch
ResultDisposition	test/catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultWas	test/catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ReusableStringStream	test/catch.hpp	/^    class ReusableStringStream {$/;"	c	namespace:Catch
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	163;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	178;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	21;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	37;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	171;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	165;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
STRINGIFY	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	309;"	d	file:
STRINGIFY	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	308;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	293;"	d	file:
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
Search	documentation/html/search/search.js	/^    this.Search = function(search)$/;"	m	class:SearchResults
Search	documentation/html/search/search.js	/^  this.Search = function()$/;"	m	class:SearchBox
SearchBox	documentation/html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchResults	documentation/html/search/search.js	/^function SearchResults(name)$/;"	c
SelectItemCount	documentation/html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m	class:SearchBox
SelectItemSet	documentation/html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m	class:SearchBox
SharedCol	dataframe/dataframe.h	/^    typedef std::shared_ptr<Column> SharedCol;$/;"	t	class:DataFrame
SourceLineInfo	test/catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
Statistic	dataframe/GroupbyFunctions.h	/^    Statistic() : type_name("double") {}$/;"	f	class:Statistic
Statistic	dataframe/GroupbyFunctions.h	/^class Statistic {$/;"	c
Statistic Class Reference	documentation/latex/classStatistic.tex	/^\\hypertarget{classStatistic}{}\\section{Statistic Class Reference}$/;"	s
StreamEndStop	test/catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<NSObject*> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<NSString*> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<T^> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<bool> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<char *> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<char const *> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<char> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<char[SZ]> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<double> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<float> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<int> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<long long> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<long> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<signed char> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<signed char[SZ]> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<std::nullptr_t> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<std::optional<T> > {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<std::pair<T1, T2> > {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<std::string> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<std::string_view> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<std::wstring> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<std::wstring_view> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<unsigned char> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<unsigned char[SZ]> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<unsigned int> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<unsigned long long> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<unsigned long> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<wchar_t *> {$/;"	s	namespace:Catch
StringMaker	test/catch.hpp	/^    struct StringMaker<wchar_t const *> {$/;"	s	namespace:Catch
StringRef	test/catch.hpp	/^        :   StringRef( s_empty, 0 )$/;"	f	class:Catch::StringRef
StringRef	test/catch.hpp	/^    class StringRef {$/;"	c	namespace:Catch
SuppressFail	test/catch.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
TO DO	documentation/latex/md_README.tex	/^A pandas like dataframe in c++$/;"	u
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	test/catch.hpp	12;"	d
TestInvokerAsMethod	test/catch.hpp	/^class TestInvokerAsMethod : public ITestInvoker {$/;"	c	namespace:Catch
ThrewException	test/catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
Toggle	documentation/html/search/search.js	/^    this.Toggle = function(id)$/;"	m	class:SearchResults
Unknown	test/catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
WIN32_LEAN_AND_MEAN	test/catch.hpp	6283;"	d
WIN32_LEAN_AND_MEAN	test/catch.hpp	6296;"	d
Warning	test/catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
Yes	test/catch.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
_BSD_SOURCE	test/catch.hpp	209;"	d
add_column	dataframe/operators.cpp	/^void DataFrame::DataFrameProxy::add_column(const shared_ptr<Column>& data) {$/;"	f	class:DataFrame::DataFrameProxy
add_elements	dataframe/column.cpp	/^void Column::add_elements(vector<T>* lhs, const vector<T>& rhs,$/;"	f	class:Column
add_to_double	dataframe/column.cpp	/^void Column::add_to_double(const Column& rhs,$/;"	f	class:Column
add_to_string	dataframe/column.cpp	/^void Column::add_to_string(const Column& rhs,$/;"	f	class:Column
always_false	test/catch.hpp	/^    struct always_false : std::false_type {};$/;"	s	namespace:Catch
append_column	dataframe/dataframe.cpp	/^void DataFrame::append_column(const string& name, const SharedCol& col) {$/;"	f	class:DataFrame
append_duplicate_rows	dataframe/dataframe.cpp	/^void DataFrame::append_duplicate_rows(deque<pair<int, int>>& indices) {$/;"	f	class:DataFrame
append_duplicate_rows	dataframe/dataframe.cpp	/^void DataFrame::append_duplicate_rows(int pos) {$/;"	f	class:DataFrame
append_index	dataframe/index.cpp	/^void Index::append_index(const deque<ele>& s) {$/;"	f	class:Index
append_index	dataframe/index.cpp	/^void Index::append_index(const int& t) {$/;"	f	class:Index
append_index	dataframe/index.cpp	/^void Index::append_index(const std::vector<int>& inp) {$/;"	f	class:Index
append_index	dataframe/index.cpp	/^void Index::append_index(const std::vector<std::string>& inp) {$/;"	f	class:Index
append_index	dataframe/index.cpp	/^void Index::append_index(const string& t) {$/;"	f	class:Index
append_index	dataframe/index.cpp	/^void Index::append_index(const vector<deque<ele>>& idx) {$/;"	f	class:Index
append_index_column	dataframe/index.h	/^    void append_index_column(const std::vector<T>& inp) {$/;"	f	class:Index
append_missing_cols	dataframe/dataframe.cpp	/^void DataFrame::append_missing_cols(const DataFrame& rhs) {$/;"	f	class:DataFrame
append_missing_rows	dataframe/dataframe.cpp	/^void DataFrame::append_missing_rows(const DataFrame& rhs) {$/;"	f	class:DataFrame
append_nan_rows	dataframe/dataframe.cpp	/^void DataFrame::append_nan_rows() {$/;"	f	class:DataFrame
append_row	dataframe/index.cpp	/^void Index::append_row(const deque<ele>& row) {$/;"	f	class:Index
append_value	dataframe/index.h	/^    void append_value(const T& t, std::deque<ele>& set) {$/;"	f	class:Index
arcSafeRelease	test/catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	test/catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
assert_same_column_length	dataframe/dataframe.cpp	/^void DataFrame::assert_same_column_length(const char* pass) {$/;"	f	class:DataFrame
auc_ch	simply_example.py	/^auc_ch = {}$/;"	v
aucs	simply_example.py	/^aucs = get_auc(df)$/;"	v
begin	dataframe/ColumnIterator.h	/^DataFrame::ColumnIterator<T> DataFrame::begin(const std::string& s) {$/;"	f	class:DataFrame
bvec	dataframe/column.h	/^    typedef std::vector<bool> bvec;$/;"	t	class:Column
capturedExpression	test/catch.hpp	/^        StringRef capturedExpression;$/;"	m	struct:Catch::AssertionInfo
carthesian_product	dataframe/dataframe.cpp	/^void carthesian_product(deque<int>& lhs, deque<int>& rhs,$/;"	f
cbegin	dataframe/ConstColumnIterator.h	/^DataFrame::ConstColumnIterator<T> DataFrame::cbegin(const std::string& s) {$/;"	f	class:DataFrame
cend	dataframe/ConstColumnIterator.h	/^DataFrame::ConstColumnIterator<T> DataFrame::cend(const std::string& s) {$/;"	f	class:DataFrame
check	dataframe/ColumnIterator.h	/^std::shared_ptr<Column> DataFrame::ColumnIterator<T>::check($/;"	f	class:DataFrame::ColumnIterator
check	dataframe/ConstColumnIterator.h	/^std::shared_ptr<Column> DataFrame::ConstColumnIterator<T>::check($/;"	f	class:DataFrame::ConstColumnIterator
check_col_len	dataframe/operators.cpp	/^void DataFrame::DataFrameProxy::check_col_len(size_t check, string m) {$/;"	f	class:DataFrame::DataFrameProxy
check_col_width	dataframe/operators.cpp	/^void DataFrame::DataFrameProxy::check_col_width(size_t check, string m) {$/;"	f	class:DataFrame::DataFrameProxy
check_positions	dataframe/print.cpp	/^void check_positions(deque<int>& inp) {$/;"	f
children	documentation/html/menudata.js	/^var menudata={children:[$/;"	p	class:menudata
col	dataframe/column.h	/^                 std::vector<bool>> col;$/;"	m	class:Column
colNames	dataframe/dataframeproxy.h	/^    std::vector<std::string> colNames;$/;"	m	class:DataFrame::DataFrameProxy
col_to_string	dataframe/print.cpp	/^vector<string> col_to_string(const string& title, const deque<int>& idx,$/;"	f
cols	simply_example.py	/^cols = get_columns()$/;"	v
column_names	dataframe/dataframe.h	/^    std::map<std::string, int> column_names;$/;"	m	class:DataFrame
column_names	dataframe/grouper.h	/^    std::map<std::string, int> column_names;$/;"	m	class:DataFrame::Grouper
columns	dataframe/dataframe.h	/^    std::vector<std::shared_ptr<Column>> columns;$/;"	m	class:DataFrame
columns	dataframe/grouper.h	/^    std::vector<SharedCol> columns;$/;"	m	class:DataFrame::Grouper
const	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
contains_null	dataframe/dataframe.cpp	/^vector<int> DataFrame::contains_null() {$/;"	f	class:DataFrame
convert	test/catch.hpp	/^            convert( const Fake& value ) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^            convert(const Fake& value) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(NSObject* nsObject) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(NSString * nsstring) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(R C::* p) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(U* p) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(char const* str) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(const std::optional<T>& optional) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(const std::pair<T1, T2>& pair) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(signed char const* str) {$/;"	f	struct:Catch::StringMaker
convert	test/catch.hpp	/^        static std::string convert(unsigned char const* str) {$/;"	f	struct:Catch::StringMaker
convertToId	documentation/html/search/search.js	/^function convertToId(search)$/;"	f
convertUnknownEnumToString	test/catch.hpp	/^        std::string convertUnknownEnumToString( E e ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	test/catch.hpp	/^         std::string>::type convertUnstreamable(T const& ex) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	test/catch.hpp	/^        , std::string>::type convertUnstreamable( T const& value ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	test/catch.hpp	/^        std::string>::type convertUnstreamable( T const& ) {$/;"	f	namespace:Catch::Detail
convert_and_push_back	dataframe/column.cpp	/^void Column::convert_and_push_back(const std::string& s) {$/;"	f	class:Column
convert_bool_to_double	dataframe/column.cpp	/^Column Column::convert_bool_to_double(const Column& rhs) {$/;"	f	class:Column
convert_bool_to_double	dataframe/column.cpp	/^void Column::convert_bool_to_double() {$/;"	f	class:Column
convert_bool_to_double	dataframe/dataframe.cpp	/^void DataFrame::convert_bool_to_double(const std::string& s) {$/;"	f	class:DataFrame
convert_deque_to_string	dataframe/index.cpp	/^string convert_deque_to_string(const deque<Index::ele>& inp) {$/;"	f
copy_row	dataframe/column.cpp	/^void Column::copy_row(int pos) {$/;"	f	class:Column
copy_row	dataframe/dataframe.cpp	/^void DataFrame::copy_row(int pos) {$/;"	f	class:DataFrame
copy_vector	dataframe/column.cpp	/^void Column::copy_vector(const vector<T>* val, const deque<int>& subsets) {$/;"	f	class:Column
correspondence_position	dataframe/dataframe.cpp	/^deque<pair<int, int>> correspondence_position(const DataFrame& lhs,$/;"	f
count	dataframe/GroupbyFunctions.h	/^    count(std::string type = "string") { type_name = type; }$/;"	f	class:count
count	dataframe/GroupbyFunctions.h	/^class count : public Statistic {$/;"	c
count Class Reference	documentation/latex/classcount.tex	/^\\hypertarget{classcount}{}\\section{count Class Reference}$/;"	s
createResults	documentation/html/search/search.js	/^function createResults()$/;"	f
create_column_names	dataframe/csv_reader.cpp	/^vector<string> DataFrame::create_column_names(std::ifstream& file) {$/;"	f	class:DataFrame
curr	dataframe/ColumnIterator.h	/^        std::size_t curr;$/;"	m	class:DataFrame::ColumnIterator
curr	dataframe/ConstColumnIterator.h	/^    std::size_t curr;$/;"	m	class:DataFrame::ConstColumnIterator
data_from_dwh	simply_example.py	/^def data_from_dwh():$/;"	f
dataframe Directory Reference	documentation/latex/dir_77cb55048e88827cd0e977a3610e1e92.tex	/^\\hypertarget{dir_77cb55048e88827cd0e977a3610e1e92}{}\\section{dataframe Directory Reference}$/;"	s
deep_copy	dataframe/dataframe.cpp	/^DataFrame deep_copy(const DataFrame& lhs) {$/;"	f
details	documentation/html/classDataFrame.html	/^<a name="details" id="details"><\/a><h2 class="groupheader">Detailed Description<\/h2>$/;"	a
df	simply_example.py	/^df = data_from_dwh()$/;"	v
df	simply_example.py	/^df = df[cols].copy()$/;"	v
df_bkup	simply_example.py	/^df_bkup = df.copy()$/;"	v
drop_column	dataframe/dataframe.cpp	/^void DataFrame::drop_column(const string& s) {$/;"	f	class:DataFrame
drop_index	dataframe/index.cpp	/^void Index::drop_index(size_t pos) {$/;"	f	class:Index
dropna	dataframe/dataframe.cpp	/^void DataFrame::dropna() {$/;"	f	class:DataFrame
dvec	dataframe/column.h	/^    typedef std::vector<double> dvec;$/;"	t	class:Column
ele	dataframe/index.h	/^    typedef std::variant<int, std::string> ele;$/;"	t	class:Index
elegible_types	dataframe/grouper.cpp	/^vector<string> DataFrame::Grouper<T>::elegible_types(const string& s) {$/;"	f	class:DataFrame::Grouper
empty_Column	dataframe/dataframe.cpp	/^std::shared_ptr<Column> empty_Column(size_t sz, string type) {$/;"	f
end	dataframe/ColumnIterator.h	/^DataFrame::ColumnIterator<T> DataFrame::end(const std::string& s) {$/;"	f	class:DataFrame
false_type	test/catch.hpp	/^            static auto test(...)->std::false_type;$/;"	m	class:Catch::Detail::IsStreamInsertable::std
features	build/CMakeFiles/feature_tests.c	/^  const char features[] = {"\\n"$/;"	v
features	build/CMakeFiles/feature_tests.cxx	/^  const char features[] = {"\\n"$/;"	v
file	test/catch.hpp	/^        char const* file;$/;"	m	struct:Catch::SourceLineInfo
fill_df	main.cpp	/^void fill_df(DataFrame& df) {$/;"	f
fill_df	old_main.cpp	/^void fill_df(DataFrame& df) {$/;"	f
fill_df	save_main.cpp	/^void fill_df(DataFrame& df) {$/;"	f
fill_df	test/mae_example.cpp	/^void fill_df(DataFrame& df) {$/;"	f
fill_df	test/old_main.cpp	/^void fill_df(DataFrame& df) {$/;"	f
fill_na	dataframe/ColumnIterator.h	/^void DataFrame::fill_na(std::string s, T t) {$/;"	f	class:DataFrame
find_column_position	dataframe/dataframe.cpp	/^int DataFrame::find_column_position(const std::string& s) const {$/;"	f	class:DataFrame
find_column_position	dataframe/dataframe.cpp	/^int DataFrame::find_column_position(const std::string& s) {$/;"	f	class:DataFrame
find_index_position	dataframe/index.cpp	/^deque<int> Index::find_index_position() const {$/;"	f	class:Index
find_index_position	dataframe/index.cpp	/^deque<int> Index::find_index_position() {$/;"	f	class:Index
find_index_position	dataframe/index.cpp	/^deque<int> Index::find_index_position(const deque<ele>& inp) const {$/;"	f	class:Index
find_index_position	dataframe/index.cpp	/^deque<int> Index::find_index_position(const deque<ele>& inp) {$/;"	f	class:Index
frame	dataframe/print.cpp	/^vector<string> frame(vector<string> vec) {$/;"	f
frame_index	dataframe/print.cpp	/^vector<string> frame_index(vector<string> inp) {$/;"	f
friends	documentation/html/classColumn.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	documentation/html/classDataFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	documentation/html/classDataFrame_1_1ColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	documentation/html/classDataFrame_1_1ConstColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
friends	documentation/html/classDataFrame_1_1DataFrameProxy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"><\/a>$/;"	a
fun	main.cpp	/^void fun(DataFrame& df) {$/;"	f
fun	old_main.cpp	/^void fun(DataFrame& df) {$/;"	f
fun	test/old_main.cpp	/^void fun(DataFrame& df) {$/;"	f
fun2	main.cpp	/^void fun2(DataFrame& df) {$/;"	f
fun2	old_main.cpp	/^void fun2(DataFrame& df) {$/;"	f
fun2	test/old_main.cpp	/^void fun2(DataFrame& df) {$/;"	f
func	dataframe/GroupbyFunctions.h	/^    virtual double func(const std::deque<int>&, const DataFrame::SharedCol&) {$/;"	f	class:Statistic
getXPos	documentation/html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	documentation/html/search/search.js	/^function getYPos(item)$/;"	f
get_arguments	dataframe/ConstColumnIterator.h	/^std::vector<int> get_arguments(const std::vector<std::pair<int, T>>& inp) {$/;"	f
get_auc	simply_example.py	/^def get_auc(df=df):$/;"	f
get_column_names	dataframe/dataframe.cpp	/^vector<string> DataFrame::get_column_names() const {$/;"	f	class:DataFrame
get_column_names	dataframe/dataframe.cpp	/^vector<string> DataFrame::get_column_names() { $/;"	f	class:DataFrame
get_column_names	dataframe/dataframe.cpp	/^vector<string> DataFrame::get_column_names() {$/;"	f	class:DataFrame
get_columns	save_main.cpp	/^vector<string> get_columns() {$/;"	f
get_columns	simply_example.py	/^def get_columns():$/;"	f
get_columns	test/mae_example.cpp	/^vector<string> get_columns() {$/;"	f
get_index_as_string	dataframe/index.cpp	/^std::vector<std::string> Index::get_index_as_string() {$/;"	f	class:Index
get_index_as_string	dataframe/index.cpp	/^vector<string> Index::get_index_as_string() const {$/;"	f	class:Index
get_index_names	dataframe/index.cpp	/^vector<deque<Index::ele>> Index::get_index_names() const {$/;"	f	class:Index
get_index_names	dataframe/index.cpp	/^vector<deque<Index::ele>> Index::get_index_names() { return index_positions; }$/;"	f	class:Index
get_mae	simply_example.py	/^def get_mae(df=df):$/;"	f
get_name	dataframe/GroupbyFunctions.h	/^    virtual std::string get_name() { return type_name; }$/;"	f	class:Statistic
get_names	dataframe/dataframe.cpp	/^vector<string> get_names(const T& inp) {$/;"	f
get_names	dataframe/dataframe.cpp	/^vector<string> get_names(t& cont) {$/;"	f
get_shared_copy	dataframe/dataframe.cpp	/^std::shared_ptr<Column> DataFrame::get_shared_copy(const std::string& s) const {$/;"	f	class:DataFrame
get_shared_copy	dataframe/dataframe.cpp	/^std::shared_ptr<Column> DataFrame::get_shared_copy(const std::string& s) {$/;"	f	class:DataFrame
get_unique	dataframe/dataframe.cpp	/^shared_ptr<Column> DataFrame::get_unique(const string& s,$/;"	f	class:DataFrame
get_unique	dataframe/dataframe.cpp	/^std::shared_ptr<Column> DataFrame::get_unique(const std::string& s) const {$/;"	f	class:DataFrame
get_unique	dataframe/dataframe.cpp	/^std::shared_ptr<Column> DataFrame::get_unique(const std::string& s) {$/;"	f	class:DataFrame
get_value	dataframe/column.h	/^    template <class T> T& get_value(int i) {$/;"	f	class:Column
groupby	dataframe/grouper.cpp	/^DataFrame::Grouper<T> DataFrame::DataFrameProxy::groupby(const string& s) {$/;"	f	class:DataFrame::DataFrameProxy
groupby	dataframe/grouper.cpp	/^DataFrame::Grouper<T> DataFrame::groupby() {$/;"	f	class:DataFrame
groupby	dataframe/grouper.cpp	/^DataFrame::Grouper<T> DataFrame::groupby(const string& s) {$/;"	f	class:DataFrame
hcat	dataframe/print.cpp	/^void hcat(vector<string>& lhs, const vector<string> rhs) {$/;"	f
index	dataframe/dataframe.h	/^    Index index;$/;"	m	class:DataFrame
index_map_type	dataframe/index.h	/^    typedef std::map<std::deque<ele>, std::deque<int>> index_map_type;$/;"	t	class:Index
index_names	dataframe/index.h	/^    index_map_type index_names;$/;"	m	class:Index
index_pair	dataframe/dataframe.h	/^    typedef std::pair<std::string, int> index_pair;$/;"	t	class:DataFrame
index_positions	dataframe/grouper.h	/^    std::vector<std::deque<Index::ele>> index_positions;$/;"	m	class:DataFrame::Grouper
index_positions	dataframe/index.h	/^    std::vector<std::deque<ele>> index_positions;$/;"	m	class:Index
info_arch	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_cray	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_cray	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v
info_language_dialect_default	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^const char* info_language_dialect_default =$/;"	v
info_language_dialect_default	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_dialect_default = "INFO" ":" "dialect_default["$/;"	v
info_platform	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_version	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version_internal[] = {$/;"	v
info_version_internal	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v
inherited	documentation/html/classcount.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
inherited	documentation/html/classmean.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"><\/a>$/;"	a
initMenu	documentation/html/menu.js	/^function initMenu(relPath,searchEnabled,serverSide,searchPage,search) {$/;"	f
init_search	documentation/html/search/search.js	/^function init_search()$/;"	f
initialize_column	dataframe/csv_reader.cpp	/^void DataFrame::initialize_column(const string& s) {$/;"	f	class:DataFrame
initialize_column	dataframe/csv_reader.cpp	/^void DataFrame::initialize_column(std::ifstream& file,$/;"	f	class:DataFrame
insert_column	dataframe/operators.cpp	/^void DataFrame::DataFrameProxy::insert_column(const string& name,$/;"	f	class:DataFrame::DataFrameProxy
insert_column	dataframe/operators.cpp	/^void DataFrame::DataFrameProxy::insert_column(const vector<string>& rhsNames,$/;"	f	class:DataFrame::DataFrameProxy
insert_data	dataframe/csv_reader.cpp	/^void DataFrame::insert_data(std::ifstream& file, const vector<string>& cols) {$/;"	f	class:DataFrame
isFalseTest	test/catch.hpp	/^    inline bool isFalseTest( int flags ) { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
is_contigious	dataframe/dataframe.cpp	/^bool DataFrame::is_contigious() {$/;"	f	class:DataFrame
is_greater_than	dataframe/column.cpp	/^void Column::is_greater_than(const double&t) {$/;"	f	class:Column
is_greater_than	dataframe/column.cpp	/^void Column::is_greater_than(const string&t) {$/;"	f	class:Column
is_null	dataframe/column.cpp	/^bool Column::is_null(size_t pos) {$/;"	f	class:Column
is_null	dataframe/column.cpp	/^void Column::is_null(vector<int>& tmp) {$/;"	f	class:Column
is_smaller_than	dataframe/column.cpp	/^void Column::is_smaller_than(const double&t) {$/;"	f	class:Column
is_smaller_than	dataframe/column.cpp	/^void Column::is_smaller_than(const string&t) {$/;"	f	class:Column
is_unique	test/catch.hpp	/^	inline constexpr auto is_unique = std::true_type{};$/;"	m	namespace:Catch
is_unique	test/catch.hpp	/^	inline constexpr auto is_unique<T, Rest...> = std::bool_constant<$/;"	m	namespace:Catch
is_valid_pair	dataframe/column.cpp	/^bool is_valid_pair(const vector<T>& lhs, const vector<T>& rhs,$/;"	f
iteration_order	dataframe/ColumnIterator.h	/^        std::deque<int> iteration_order;$/;"	m	class:DataFrame::ColumnIterator
iteration_order	dataframe/ConstColumnIterator.h	/^    std::deque<int> iteration_order;$/;"	m	class:DataFrame::ConstColumnIterator
l00001	documentation/html/ColumnIterator_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GUARD_ColumnIterator_h<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GUARD_ColumnIterator_h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;dataframe.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cmath&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classColumn.html">Column<\/a>;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classDataFrame_1_1ColumnIterator.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator<\/a> {<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> V&gt;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;        <span class="keyword">friend<\/span> <span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> iter&lt;V&gt;&amp;, <span class="keyword">const<\/span> iter&lt;V&gt;&amp;);<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;        <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> V&gt;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;        <span class="keyword">friend<\/span> <span class="keywordtype">bool<\/span> operator!=(<span class="keyword">const<\/span> iter&lt;V&gt;&amp;, <span class="keyword">const<\/span> iter&lt;V&gt;&amp;);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;        <span class="comment">\/\/ColumnIterator();<\/span><\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        <a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator<\/a>(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; a, <span class="keywordtype">int<\/span> n, <span class="keywordtype">size_t<\/span> sz=0):<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;            theDataFrame(a), wptr(a.columns[n]), curr(sz), iteration_order() {<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;        iteration_order = a.find_index_position();}<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;        T&amp; operator*() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;        T&amp; operator[](<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;        <a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator<\/a>&amp; operator++();<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;        <a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator<\/a> operator++(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        <a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator<\/a>&amp; operator--();<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator<\/a> operator--(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;        std::shared_ptr&lt;Column&gt; check(std::size_t, <span class="keyword">const<\/span> std::string&amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; theDataFrame;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        std::weak_ptr&lt;Column&gt; wptr;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        std::size_t curr;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        std::deque&lt;int&gt; iteration_order;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;};<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a>&amp; lhs,<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;                <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a>&amp; rhs) {<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keywordflow">return<\/span> lhs.curr == rhs.curr;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;}<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keywordtype">bool<\/span> operator!=(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a>&amp; lhs,<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;                <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a>&amp; rhs) {<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keywordflow">return<\/span> !(lhs == rhs);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;}<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a> DataFrame::begin(<span class="keyword">const<\/span> std::string&amp; s) {<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    <span class="keywordflow">try<\/span> {<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        make_unique_if(s);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordflow">return<\/span> <a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator&lt;T&gt;<\/a>(*<span class="keyword">this<\/span>, column_names.at(s));<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    } <span class="keywordflow">catch<\/span> (std::out_of_range&amp; e) {<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordflow">throw<\/span> std::out_of_range(<span class="stringliteral">&quot;Column: &quot;<\/span> + s + <span class="stringliteral">&quot; not found&quot;<\/span>);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    }<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;}<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a> DataFrame::end(<span class="keyword">const<\/span> std::string&amp; s) {<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordflow">try<\/span> {<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        make_unique_if(s);<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;        <span class="keywordflow">return<\/span> <a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator&lt;T&gt;<\/a>(*<span class="keyword">this<\/span>, column_names.at(s), index_names.size());<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    } <span class="keywordflow">catch<\/span> (std::out_of_range&amp; e) {<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordflow">throw<\/span> std::out_of_range(<span class="stringliteral">&quot;Column: &quot;<\/span> + s + <span class="stringliteral">&quot; not found&quot;<\/span>);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    }<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;}<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;std::shared_ptr&lt;Column&gt; <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;::check<\/a>(<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;        <span class="keywordtype">size_t<\/span> i, <span class="keyword">const<\/span> std::string&amp; msg)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keyword">auto<\/span> ret = wptr.lock();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordflow">if<\/span> (!ret) <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Unbound ColumnIterator&quot;<\/span>);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordflow">if<\/span> (i &gt;- ret-&gt;size()) <span class="keywordflow">throw<\/span> std::out_of_range(msg);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;}<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;T&amp; <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;::operator*<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">auto<\/span> p = check(curr, <span class="stringliteral">&quot;dereferencing past end&quot;<\/span>);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">int<\/span> pos = iteration_order[curr];<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordflow">return<\/span> (*p).template get_value&lt;T&gt;(pos);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;}<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;T&amp; <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;::operator[]<\/a>(<span class="keywordtype">int<\/span> i) {<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">auto<\/span> p = check(i, <span class="stringliteral">&quot;dereferencing past end&quot;<\/span>);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">int<\/span> pos = iteration_order[curr];<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordflow">return<\/span> (*p).template get_value&lt;T&gt;(pos);<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;}<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a>&amp; <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;::operator++<\/a>() {<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    check(curr, <span class="stringliteral">&quot;increment past the end of ColumnIterator&quot;<\/span>);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    ++curr;<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;}<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;<a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a> <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;::operator++<\/a>(<span class="keywordtype">int<\/span>) {<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator<\/a> ret = *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    ++*<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;}<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;<a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a>&amp; <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;::operator--<\/a>() {<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    --curr;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    check(curr, <span class="stringliteral">&quot;decreement past the beginning of ColumnIterator&quot;<\/span>);<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;}<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;<a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a> <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;::operator--<\/a>(<span class="keywordtype">int<\/span>) {<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator<\/a> ret = *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    --*<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;}<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="keywordtype">void<\/span> DataFrame::fill_na(std::string s, T t) {<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;    iter&lt;T&gt; it = begin&lt;T&gt;(s);<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    iter&lt;T&gt;  e = end&lt;T&gt;(s);<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    std::transform(it, e, it, <\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;            [&amp;t](<span class="keyword">auto<\/span>&amp; d) {<span class="keywordflow">return<\/span> std::isnan(d) ? t : d;});<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;}<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDataFrame_1_1ColumnIterator_html"><div class="ttname"><a href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator<\/a><\/div><div class="ttdef"><b>Definition:<\/b> ColumnIterator.h:9<\/div><\/div>$/;"	a
l00001	documentation/html/ConstColumnIterator_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GUARD_ConstColumnIterator_h<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GUARD_ConstColumnIterator_h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;iostream&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &quot;dataframe.h&quot;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;cmath&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classColumn.html">Column<\/a>;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno"><a class="line" href="classDataFrame_1_1ConstColumnIterator.html">    9<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator<\/a> {<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> V&gt;<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> const_iter&lt;V&gt;&amp;, <span class="keyword">const<\/span> const_iter&lt;V&gt;&amp;);<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> V&gt;<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keywordtype">bool<\/span> operator!=(<span class="keyword">const<\/span> const_iter&lt;V&gt;&amp;, <span class="keyword">const<\/span> const_iter&lt;V&gt;&amp;);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; a, <span class="keywordtype">int<\/span> n, <span class="keywordtype">size_t<\/span> sz = 0)<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;        : theDataFrame(a), wptr(a.columns[n]), curr(sz), iteration_order() {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;        iteration_order = a.find_index_position();}<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    std::string to_string();<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">const<\/span> T&amp; operator*() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">const<\/span> T&amp; operator[](<span class="keywordtype">int<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator<\/a>&amp; operator++();<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator<\/a> operator++(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator<\/a>&amp; operator--();<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator<\/a> operator--(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;   <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    std::shared_ptr&lt;Column&gt; check(std::size_t, <span class="keyword">const<\/span> std::string&amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; theDataFrame;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    std::weak_ptr&lt;Column&gt; wptr;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    std::size_t curr;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    std::deque&lt;int&gt; iteration_order;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;};<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;<span class="keywordtype">bool<\/span> operator==(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;<\/a>&amp; lhs,<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;                <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;<\/a>&amp; rhs) {<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordflow">return<\/span> lhs.curr == rhs.curr;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;}<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;<span class="keywordtype">bool<\/span> operator!=(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;<\/a>&amp; lhs,<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;                <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;<\/a>&amp; rhs) {<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordflow">return<\/span> !(lhs == rhs);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;}<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;<\/a> <a class="code" href="classDataFrame.html#a857dadee258495743462244022a2dcce">DataFrame::cbegin<\/a>(<span class="keyword">const<\/span> std::string&amp; s) {<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <span class="keywordflow">try<\/span> {<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;        <span class="keywordflow">return<\/span> <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator&lt;T&gt;<\/a>(*<span class="keyword">this<\/span>, column_names.at(s));<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    } <span class="keywordflow">catch<\/span> (std::out_of_range&amp; e) {<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;        <span class="keywordflow">throw<\/span> std::out_of_range(<span class="stringliteral">&quot;Column: &quot;<\/span> + s + <span class="stringliteral">&quot; not found&quot;<\/span>);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    }<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;}<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;<a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;<\/a> <a class="code" href="classDataFrame.html#a895c45b1be67d772aed3fa10169a1038">DataFrame::cend<\/a>(<span class="keyword">const<\/span> std::string&amp; s) {<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;    <span class="keywordflow">try<\/span> {<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;        <span class="keywordflow">return<\/span> <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator&lt;T&gt;<\/a>(*<span class="keyword">this<\/span>, column_names.at(s),<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;                                      index_names.size());<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    } <span class="keywordflow">catch<\/span> (std::out_of_range&amp; e) {<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordflow">throw<\/span> std::out_of_range(<span class="stringliteral">&quot;Column: &quot;<\/span> + s + <span class="stringliteral">&quot; not found&quot;<\/span>);<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    }<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;}<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;std::shared_ptr&lt;Column&gt; <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::check<\/a>(<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">size_t<\/span> i, <span class="keyword">const<\/span> std::string&amp; msg)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;    <span class="keyword">auto<\/span> ret = wptr.lock();<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;    <span class="keywordflow">if<\/span> (!ret) <span class="keywordflow">throw<\/span> std::runtime_error(<span class="stringliteral">&quot;Unbound ConstColumnIterator&quot;<\/span>);<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keywordflow">if<\/span> (i &gt; -ret-&gt;size()) <span class="keywordflow">throw<\/span> std::out_of_range(msg);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;}<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;<span class="keyword">const<\/span> T&amp; <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::operator*<\/a>()<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keyword">auto<\/span> p = check(curr, <span class="stringliteral">&quot;dereferencing past end&quot;<\/span>);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">int<\/span> pos = iteration_order[curr];<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordflow">return<\/span> (*p).template get_value&lt;T&gt;(pos);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;}<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;<span class="keyword">const<\/span> T&amp; <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::operator[]<\/a>(<span class="keywordtype">int<\/span> i)<span class="keyword"> const <\/span>{<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keyword">auto<\/span> p = check(i, <span class="stringliteral">&quot;dereferencing past end&quot;<\/span>);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">int<\/span> pos = iteration_order[curr];<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keywordflow">return<\/span> (*p).template get_value&lt;T&gt;(pos);<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;}<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;std::string <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::to_string<\/a>() {<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    <span class="keyword">auto<\/span> p = check(curr, <span class="stringliteral">&quot;dereferencing past end&quot;<\/span>);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;    <span class="keywordtype">int<\/span> pos = iteration_order[curr];<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;    <span class="keywordflow">return<\/span> (*p).to_string(pos);<\/div><div class="line"><a name="l00093"><\/a><span class="lineno">   93<\/span>&#160;}<\/div><div class="line"><a name="l00094"><\/a><span class="lineno">   94<\/span>&#160;<\/div><div class="line"><a name="l00095"><\/a><span class="lineno">   95<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00096"><\/a><span class="lineno">   96<\/span>&#160;DataFrame::const_iter&lt;T&gt;&amp; <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::operator++<\/a>() {<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    check(curr, <span class="stringliteral">&quot;increment past the end of ConstColumnIterator&quot;<\/span>);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    ++curr;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;}<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;<\/div><div class="line"><a name="l00102"><\/a><span class="lineno">  102<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00103"><\/a><span class="lineno">  103<\/span>&#160;DataFrame::const_iter&lt;T&gt; <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::operator++<\/a>(<span class="keywordtype">int<\/span>) {<\/div><div class="line"><a name="l00104"><\/a><span class="lineno">  104<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator<\/a> ret = *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00105"><\/a><span class="lineno">  105<\/span>&#160;    ++*<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00106"><\/a><span class="lineno">  106<\/span>&#160;    <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l00107"><\/a><span class="lineno">  107<\/span>&#160;}<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;DataFrame::const_iter&lt;T&gt;&amp; <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::operator--<\/a>() {<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    --curr;<\/div><div class="line"><a name="l00112"><\/a><span class="lineno">  112<\/span>&#160;    check(curr, <span class="stringliteral">&quot;decreement past the beginning of ConstColumnIterator&quot;<\/span>);<\/div><div class="line"><a name="l00113"><\/a><span class="lineno">  113<\/span>&#160;    <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00114"><\/a><span class="lineno">  114<\/span>&#160;}<\/div><div class="line"><a name="l00115"><\/a><span class="lineno">  115<\/span>&#160;<\/div><div class="line"><a name="l00116"><\/a><span class="lineno">  116<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00117"><\/a><span class="lineno">  117<\/span>&#160;DataFrame::const_iter&lt;T&gt; <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;::operator--<\/a>(<span class="keywordtype">int<\/span>) {<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator<\/a> ret = *<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    --*<span class="keyword">this<\/span>;<\/div><div class="line"><a name="l00120"><\/a><span class="lineno">  120<\/span>&#160;    <span class="keywordflow">return<\/span> ret;<\/div><div class="line"><a name="l00121"><\/a><span class="lineno">  121<\/span>&#160;}<\/div><div class="line"><a name="l00122"><\/a><span class="lineno">  122<\/span>&#160;<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;<span class="keyword">typename<\/span> std::vector&lt;std::pair&lt;int, T&gt;&gt;::iterator partition_pairs(<\/div><div class="line"><a name="l00125"><\/a><span class="lineno">  125<\/span>&#160;    std::vector&lt;std::pair&lt;int, T&gt;&gt;&amp; inp) {<\/div><div class="line"><a name="l00126"><\/a><span class="lineno">  126<\/span>&#160;    <span class="keywordflow">if<\/span> constexpr (std::is_same&lt;T, double&gt;::value) {<\/div><div class="line"><a name="l00127"><\/a><span class="lineno">  127<\/span>&#160;        <span class="keyword">auto<\/span> fun = [&amp;](std::pair&lt;int, T&gt;&amp; a) { <span class="keywordflow">return<\/span> !std::isnan(a.second); };<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;        <span class="keywordflow">return<\/span> std::stable_partition(inp.begin(), inp.end(), fun);<\/div><div class="line"><a name="l00129"><\/a><span class="lineno">  129<\/span>&#160;    } <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> constexpr (std::is_same&lt;T, std::string&gt;::value) {<\/div><div class="line"><a name="l00130"><\/a><span class="lineno">  130<\/span>&#160;        <span class="keyword">auto<\/span> fun = [&amp;](std::pair&lt;int, T&gt;&amp; a) { <span class="keywordflow">return<\/span> !(a.second == <span class="stringliteral">&quot;NA&quot;<\/span>); };<\/div><div class="line"><a name="l00131"><\/a><span class="lineno">  131<\/span>&#160;        <span class="keywordflow">return<\/span> std::stable_partition(inp.begin(), inp.end(), fun);<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    }<\/div><div class="line"><a name="l00133"><\/a><span class="lineno">  133<\/span>&#160;}<\/div><div class="line"><a name="l00134"><\/a><span class="lineno">  134<\/span>&#160;<\/div><div class="line"><a name="l00135"><\/a><span class="lineno">  135<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;<span class="keywordtype">void<\/span> sort_pairs(<span class="keyword">typename<\/span> std::vector&lt;std::pair&lt;int, T&gt;&gt;::iterator end,<\/div><div class="line"><a name="l00137"><\/a><span class="lineno">  137<\/span>&#160;                std::vector&lt;std::pair&lt;int, T&gt;&gt;&amp; inp) {<\/div><div class="line"><a name="l00138"><\/a><span class="lineno">  138<\/span>&#160;    <span class="keyword">auto<\/span> fun = [&amp;](<span class="keyword">auto<\/span>&amp; a, <span class="keyword">auto<\/span>&amp; b) { <span class="keywordflow">return<\/span> a.second &lt; b.second; };<\/div><div class="line"><a name="l00139"><\/a><span class="lineno">  139<\/span>&#160;    std::sort(inp.begin(), end, fun);<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;}<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;std::vector&lt;int&gt; get_arguments(<span class="keyword">const<\/span> std::vector&lt;std::pair&lt;int, T&gt;&gt;&amp; inp) {<\/div><div class="line"><a name="l00144"><\/a><span class="lineno">  144<\/span>&#160;    std::vector&lt;int&gt; res(inp.size(), 0);<\/div><div class="line"><a name="l00145"><\/a><span class="lineno">  145<\/span>&#160;    std::transform(inp.begin(), inp.end(), res.begin(),<\/div><div class="line"><a name="l00146"><\/a><span class="lineno">  146<\/span>&#160;                   [](<span class="keyword">const<\/span> std::pair&lt;int, T&gt;&amp; ele) { <span class="keywordflow">return<\/span> ele.first; });<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    <span class="keywordflow">return<\/span> res;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;}<\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;std::vector&lt;int&gt; DataFrame::permutation_index(<span class="keyword">const<\/span> std::string&amp; s) {<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator&lt;T&gt;<\/a> it = cbegin&lt;T&gt;(s);<\/div><div class="line"><a name="l00153"><\/a><span class="lineno">  153<\/span>&#160;    std::vector&lt;std::pair&lt;int, T&gt;&gt; res(<a class="code" href="classDataFrame.html#a02cb54422bd4ac0b2cae6f6a811b0f93">size<\/a>().first);<\/div><div class="line"><a name="l00154"><\/a><span class="lineno">  154<\/span>&#160;    <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; res.size(); ++i) res[i] = std::make_pair(i, *it++);<\/div><div class="line"><a name="l00155"><\/a><span class="lineno">  155<\/span>&#160;    <span class="keyword">typename<\/span> std::vector&lt;std::pair&lt;int, T&gt;&gt;::iterator boundary;<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    boundary = partition_pairs&lt;T&gt;(res);<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    sort_pairs&lt;T&gt;(boundary, res);<\/div><div class="line"><a name="l00158"><\/a><span class="lineno">  158<\/span>&#160;    <span class="keywordflow">return<\/span> get_arguments&lt;T&gt;(res);<\/div><div class="line"><a name="l00159"><\/a><span class="lineno">  159<\/span>&#160;}<\/div><div class="line"><a name="l00160"><\/a><span class="lineno">  160<\/span>&#160;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDataFrame_html_a895c45b1be67d772aed3fa10169a1038"><div class="ttname"><a href="classDataFrame.html#a895c45b1be67d772aed3fa10169a1038">DataFrame::cend<\/a><\/div><div class="ttdeci">const_iter&lt; T &gt; cend(const std::string &amp;)<\/div><div class="ttdoc">A constant iterator over the columns anchored to the end of the column. <\/div><\/div>$/;"	a
l00001	documentation/html/column_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GUARD_Column_h<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GUARD_Column_h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;variant&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;deque&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDataFrame.html">DataFrame<\/a>;<\/div><div class="line"><a name="l00010"><\/a><span class="lineno"><a class="line" href="classColumn.html">   10<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classColumn.html">Column<\/a> {<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classColumn.html">Column<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;, <span class="keywordtype">double<\/span>);<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classColumn.html">Column<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;, <span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classDataFrame.html">DataFrame<\/a>;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keywordtype">void<\/span> <a class="code" href="classColumn.html#a27cc8acd51a5cd40e6a2726368914661">append_missing_cols<\/a>(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">friend<\/span> std::string::size_type width(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;, std::vector&lt;std::string&gt;&amp;);<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> <a class="code" href="classColumn.html#a92ccb0425c54a5b5cd6f78ed1bb4c3ff">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> T&amp;);<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator&gt;(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> T&amp;);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <a class="code" href="classColumn.html">Column<\/a>(): col() {};<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="comment">\/\/Column(const Column&amp;, int); I THINK THIS CONSTRUCTOR IS NOT NEEDED?!?<\/span><\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;<span class="comment"><\/span>    <a class="code" href="classColumn.html">Column<\/a>(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;, <span class="keyword">const<\/span> std::deque&lt;int&gt;&amp;);<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno"><a class="line" href="classColumn.html#ab9bd37fa800223b400c0a1158ca244e1">   34<\/a><\/span>&#160;    <span class="keyword">explicit<\/span> <a class="code" href="classColumn.html#ab9bd37fa800223b400c0a1158ca244e1">Column<\/a>(<span class="keyword">const<\/span> std::vector&lt;T&gt;&amp; t): col(t) {}<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <a class="code" href="classColumn.html">Column<\/a>&amp; plus(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;, <span class="keyword">const<\/span> std::deque&lt;std::pair&lt;int, int&gt;&gt;&amp;);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classColumn.html#a9a318e80a0581ab65f1ec81499064bc4">convert_and_push_back<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">void<\/span> push_back(<span class="keyword">const<\/span> T);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keywordtype">size_t<\/span> <a class="code" href="classColumn.html#a4bbf8fcd3b445bf8f11bb1f03f76e747">size<\/a>();<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    <span class="keywordtype">size_t<\/span> <a class="code" href="classColumn.html#a4bbf8fcd3b445bf8f11bb1f03f76e747">size<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;    std::string <a class="code" href="classColumn.html#a4e1088bc99d0408a533a2eadfbcdca23">type_name<\/a>();<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt; T&amp; get_value(<span class="keywordtype">int<\/span> i) {<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;        <span class="keywordflow">if<\/span> (std::holds_alternative&lt;std::vector&lt;T&gt;&gt;(col))<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;            <span class="keywordflow">return<\/span> std::get&lt;std::vector&lt;T&gt;&gt;(col)[i];<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <span class="keywordflow">else<\/span> {<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;            std::string s = <span class="stringliteral">&quot;incompatible template type in\\n: &quot;<\/span>;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            <span class="keywordflow">throw<\/span> std::invalid_argument(s + __PRETTY_FUNCTION__);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        }<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    }<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno">   60<\/span>&#160;    <span class="keywordtype">void<\/span> push_back_nan();<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;    <span class="keywordtype">void<\/span> push_back_nan();<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    std::string to_string(<span class="keywordtype">int<\/span>) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="keywordtype">void<\/span> copy_vector(<span class="keyword">const<\/span> std::vector&lt;T&gt;*, <span class="keyword">const<\/span> std::deque&lt;int&gt;&amp;);<\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#ae97d60f192876309e2615abffb544cbe">convert_bool_to_double<\/a>();<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <a class="code" href="classColumn.html">Column<\/a> <a class="code" href="classDataFrame.html#ae97d60f192876309e2615abffb544cbe">convert_bool_to_double<\/a>(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;);<\/div><div class="line"><a name="l00067"><\/a><span class="lineno">   67<\/span>&#160;    <span class="keywordtype">void<\/span> copy_row(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00068"><\/a><span class="lineno">   68<\/span>&#160;<\/div><div class="line"><a name="l00069"><\/a><span class="lineno">   69<\/span>&#160;   <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keywordtype">void<\/span> add_elements(std::vector&lt;T&gt;*, <span class="keyword">const<\/span> std::vector&lt;T&gt;&amp;,<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;                      <span class="keyword">const<\/span> std::deque&lt;std::pair&lt;int, int&gt;&gt;&amp;);<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;    std::variant&lt;std::vector&lt;double&gt;, std::vector&lt;std::string&gt;,<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;                 std::vector&lt;bool&gt;&gt; col;<\/div><div class="line"><a name="l00075"><\/a><span class="lineno">   75<\/span>&#160;    <span class="keywordtype">void<\/span> replace_nan();<\/div><div class="line"><a name="l00076"><\/a><span class="lineno">   76<\/span>&#160;    <span class="keywordtype">void<\/span> replace_nan(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00077"><\/a><span class="lineno">   77<\/span>&#160;    <span class="keywordtype">void<\/span> is_null(std::vector&lt;int&gt;&amp;);<\/div><div class="line"><a name="l00078"><\/a><span class="lineno">   78<\/span>&#160;    <span class="keywordtype">bool<\/span> is_null(<span class="keywordtype">size_t<\/span>);<\/div><div class="line"><a name="l00079"><\/a><span class="lineno">   79<\/span>&#160;    <span class="keywordtype">void<\/span> add_to_double(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;,<span class="keyword">const<\/span>  std::deque&lt;std::pair&lt;int, int&gt;&gt;&amp;);<\/div><div class="line"><a name="l00080"><\/a><span class="lineno">   80<\/span>&#160;    <span class="keywordtype">void<\/span> add_to_string(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;,<span class="keyword">const<\/span>  std::deque&lt;std::pair&lt;int, int&gt;&gt;&amp;);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    <span class="keywordtype">void<\/span> is_smaller_than(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span>&amp;);<\/div><div class="line"><a name="l00082"><\/a><span class="lineno">   82<\/span>&#160;    <span class="keywordtype">void<\/span> is_smaller_than(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00083"><\/a><span class="lineno">   83<\/span>&#160;    <span class="keywordtype">void<\/span> is_greater_than(<span class="keyword">const<\/span> <span class="keywordtype">double<\/span>&amp;);<\/div><div class="line"><a name="l00084"><\/a><span class="lineno">   84<\/span>&#160;    <span class="keywordtype">void<\/span> is_greater_than(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    <span class="keyword">typedef<\/span> std::vector&lt;double&gt; dvec;<\/div><div class="line"><a name="l00086"><\/a><span class="lineno">   86<\/span>&#160;    <span class="keyword">typedef<\/span> std::vector&lt;std::string&gt; svec;<\/div><div class="line"><a name="l00087"><\/a><span class="lineno">   87<\/span>&#160;    <span class="keyword">typedef<\/span> std::vector&lt;bool&gt; bvec;<\/div><div class="line"><a name="l00088"><\/a><span class="lineno">   88<\/span>&#160;};<\/div><div class="line"><a name="l00089"><\/a><span class="lineno">   89<\/span>&#160;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;<a class="code" href="classColumn.html">Column<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;, <span class="keywordtype">double<\/span> d);<\/div><div class="line"><a name="l00091"><\/a><span class="lineno">   91<\/span>&#160;<a class="code" href="classColumn.html">Column<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classColumn.html">Column<\/a>&amp;, <span class="keyword">const<\/span> std::string&amp; s);<\/div><div class="line"><a name="l00092"><\/a><span class="lineno">   92<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classColumn_html_a4e1088bc99d0408a533a2eadfbcdca23"><div class="ttname"><a href="classColumn.html#a4e1088bc99d0408a533a2eadfbcdca23">Column::type_name<\/a><\/div><div class="ttdeci">std::string type_name()<\/div><div class="ttdef"><b>Definition:<\/b> column.cpp:35<\/div><\/div>$/;"	a
l00001	documentation/html/dataframe_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GUARD_dataframe_h<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GUARD_dataframe_h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;map&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;memory&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &lt;string&gt;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<span class="preprocessor">#include &lt;utility&gt;<\/span><\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;<span class="preprocessor">#include &lt;vector&gt;<\/span><\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;<span class="preprocessor">#include &lt;fstream&gt;<\/span><\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;<span class="preprocessor">#include &lt;unordered_map&gt;<\/span><\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;<span class="preprocessor">#include &lt;deque&gt;<\/span><\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;<span class="preprocessor">#include &quot;column.h&quot;<\/span><\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;<\/div><div class="line"><a name="l00016"><\/a><span class="lineno"><a class="line" href="classDataFrame.html">   16<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDataFrame.html">DataFrame<\/a> {<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    <span class="keyword">typedef<\/span> std::pair&lt;std::string, int&gt; index_pair;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator<\/a>;<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno"><a class="line" href="classDataFrame_1_1Grouper.html">   22<\/a><\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1Grouper.html">Grouper<\/a>;<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator<\/a>;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    <span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>;<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">using<\/span> const_iter = <span class="keyword">typename<\/span> <a class="code" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator&lt;T&gt;<\/a>;<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    <span class="keyword">using<\/span> iter = <span class="keyword">typename<\/span> <a class="code" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator&lt;T&gt;<\/a>;<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    <span class="keyword">typedef<\/span> std::shared_ptr&lt;Column&gt; SharedCol;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1Grouper.html">Grouper<\/a>;<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1ConstColumnIterator.html">ConstColumnIterator<\/a>;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1ColumnIterator.html">ColumnIterator<\/a>;<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> deep_copy(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; lhs);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keyword">friend<\/span> std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keyword">friend<\/span> std::deque&lt;std::pair&lt;int, int&gt;&gt; correspondence_position(<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;            <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; lhs, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; rhs);<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00046"><\/a><span class="lineno"><a class="line" href="classDataFrame.html#a8c08b940f5d6a095ac079ef277133c1a">   46<\/a><\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> <a class="code" href="classDataFrame.html#a8c08b940f5d6a095ac079ef277133c1a">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; lhs, <span class="keyword">const<\/span> T&amp; t) {<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;        <a class="code" href="classDataFrame.html">DataFrame<\/a> copy = deep_copy(lhs);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keyword">const<\/span> <span class="keyword">auto<\/span>&amp; x: copy.column_names)<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;            copy.columns[x.second]-&gt;is_smaller_than(t);<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;        <span class="keywordflow">return<\/span> copy;<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    }<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator&gt;(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; lhs, <span class="keyword">const<\/span> T&amp;t) {<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;        <a class="code" href="classDataFrame.html">DataFrame<\/a> copy = deep_copy(lhs);<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;        <span class="keywordflow">for<\/span> (<span class="keyword">const<\/span> <span class="keyword">auto<\/span>&amp; x: copy.column_names)<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;            copy.columns[x.second]-&gt;is_greater_than(t);<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;        <span class="keywordflow">return<\/span> copy;<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;    }<\/div><div class="line"><a name="l00059"><\/a><span class="lineno">   59<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00060"><\/a><span class="lineno"><a class="line" href="classDataFrame.html#af0bd28935e605ba646d407b02e0a5850">   60<\/a><\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> <a class="code" href="classDataFrame.html#af0bd28935e605ba646d407b02e0a5850">operator+<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; lhs, <span class="keyword">const<\/span> T&amp; t) {<\/div><div class="line"><a name="l00061"><\/a><span class="lineno">   61<\/span>&#160;        <span class="keywordflow">return<\/span> deep_copy(lhs) += t;<\/div><div class="line"><a name="l00062"><\/a><span class="lineno">   62<\/span>&#160;    }<\/div><div class="line"><a name="l00063"><\/a><span class="lineno">   63<\/span>&#160;<\/div><div class="line"><a name="l00064"><\/a><span class="lineno">   64<\/span>&#160;    <span class="comment">\/\/ Functions<\/span><\/div><div class="line"><a name="l00065"><\/a><span class="lineno">   65<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>();<\/div><div class="line"><a name="l00066"><\/a><span class="lineno">   66<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;); <span class="comment">\/\/allow implicit conversion;<\/span><\/div><div class="line"><a name="l00070"><\/a><span class="lineno">   70<\/span>&#160;<span class="comment"><\/span>    <span class="keyword">explicit<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>(std::ifstream&amp;);<\/div><div class="line"><a name="l00071"><\/a><span class="lineno">   71<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00072"><\/a><span class="lineno">   72<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>(<span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;, <span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;,<\/div><div class="line"><a name="l00073"><\/a><span class="lineno">   73<\/span>&#160;              <span class="keyword">const<\/span> std::vector&lt;std::vector&lt;T&gt;&gt;&amp;);<\/div><div class="line"><a name="l00074"><\/a><span class="lineno">   74<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00081"><\/a><span class="lineno">   81<\/span>&#160;    SharedCol <a class="code" href="classDataFrame.html#a5909652f24e66c22922b4b4c910f2b09">get_unique<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00085"><\/a><span class="lineno">   85<\/span>&#160;    SharedCol <a class="code" href="classDataFrame.html#a5909652f24e66c22922b4b4c910f2b09">get_unique<\/a>(<span class="keyword">const<\/span> std::string&amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00090"><\/a><span class="lineno">   90<\/span>&#160;    SharedCol <a class="code" href="classDataFrame.html#a5909652f24e66c22922b4b4c910f2b09">get_unique<\/a>(<span class="keyword">const<\/span> std::string&amp;, <span class="keyword">const<\/span> std::deque&lt;int&gt;&amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00097"><\/a><span class="lineno">   97<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; <a class="code" href="classDataFrame.html#a61f3301cc72548b4b3536c0844fb156d">operator+=<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; rhs);<\/div><div class="line"><a name="l00098"><\/a><span class="lineno">   98<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00099"><\/a><span class="lineno">   99<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; <a class="code" href="classDataFrame.html#a61f3301cc72548b4b3536c0844fb156d">operator+=<\/a>(<span class="keyword">const<\/span> T&amp;);<\/div><div class="line"><a name="l00100"><\/a><span class="lineno">  100<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00101"><\/a><span class="lineno">  101<\/span>&#160;    iter&lt;T&gt; begin(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00108"><\/a><span class="lineno">  108<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00109"><\/a><span class="lineno">  109<\/span>&#160;    const_iter&lt;T&gt; <a class="code" href="classDataFrame.html#a857dadee258495743462244022a2dcce">cbegin<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00110"><\/a><span class="lineno">  110<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00111"><\/a><span class="lineno">  111<\/span>&#160;    iter&lt;T&gt; end(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00118"><\/a><span class="lineno">  118<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00119"><\/a><span class="lineno">  119<\/span>&#160;    const_iter&lt;T&gt; <a class="code" href="classDataFrame.html#a895c45b1be67d772aed3fa10169a1038">cend<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00123"><\/a><span class="lineno">  123<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#a6abc672ac4c439e3e785bd3f84c8da15">dropna<\/a>();<\/div><div class="line"><a name="l00124"><\/a><span class="lineno">  124<\/span>&#160;    <span class="keywordtype">void<\/span> drop_row(std::vector&lt;std::string&gt;);<\/div><div class="line"><a name="l00128"><\/a><span class="lineno">  128<\/span>&#160;    <span class="keywordtype">void<\/span> drop_row(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00132"><\/a><span class="lineno">  132<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#afa6fd73a62f0d45b03e5df738a575693">drop_column<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00136"><\/a><span class="lineno">  136<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#ae9eb64b2d0c072459f85a4b840978060">sort_by_index<\/a>();<\/div><div class="line"><a name="l00140"><\/a><span class="lineno">  140<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#a09c79a451ef2d4ff909e1d01d4788f22">sort_by_column<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00141"><\/a><span class="lineno">  141<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a> operator[](<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00142"><\/a><span class="lineno">  142<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a> operator[](<span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp; col_name);<\/div><div class="line"><a name="l00143"><\/a><span class="lineno">  143<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a> loc(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00147"><\/a><span class="lineno">  147<\/span>&#160;    std::pair&lt;size_t, size_t&gt; <a class="code" href="classDataFrame.html#a02cb54422bd4ac0b2cae6f6a811b0f93">size<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00148"><\/a><span class="lineno">  148<\/span>&#160;    <span class="keywordtype">int<\/span> use_count(<span class="keyword">const<\/span> std::string&amp;);  <span class="comment">\/\/ Can i const qualify it?<\/span><\/div><div class="line"><a name="l00149"><\/a><span class="lineno">  149<\/span>&#160;    std::vector&lt;std::string&gt; get_index_names();<\/div><div class="line"><a name="l00150"><\/a><span class="lineno">  150<\/span>&#160;    std::vector&lt;std::string&gt; get_index_names() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00151"><\/a><span class="lineno">  151<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00152"><\/a><span class="lineno">  152<\/span>&#160;    <span class="keywordtype">void<\/span> fill_na(std::string, T);<\/div><div class="line"><a name="l00156"><\/a><span class="lineno">  156<\/span>&#160;    std::vector&lt;std::string&gt; <a class="code" href="classDataFrame.html#a56207fb528a4d9583e38829fa6d2b7b0">get_column_names<\/a>();<\/div><div class="line"><a name="l00157"><\/a><span class="lineno">  157<\/span>&#160;    std::vector&lt;std::string&gt; <a class="code" href="classDataFrame.html#a56207fb528a4d9583e38829fa6d2b7b0">get_column_names<\/a>() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00161"><\/a><span class="lineno">  161<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00162"><\/a><span class="lineno">  162<\/span>&#160;    std::vector&lt;std::string&gt; <a class="code" href="classDataFrame.html#a56207fb528a4d9583e38829fa6d2b7b0">get_column_names<\/a>();<\/div><div class="line"><a name="l00172"><\/a><span class="lineno">  172<\/span>&#160;    <span class="keywordtype">bool<\/span> <a class="code" href="classDataFrame.html#a40f6420c823601946d56ba625484a74e">is_contigious<\/a>();<\/div><div class="line"><a name="l00182"><\/a><span class="lineno">  182<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#a7a1b7c79f2b98e18ed5cda2852dd5341">make_contigious<\/a>();<\/div><div class="line"><a name="l00186"><\/a><span class="lineno">  186<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#ae97d60f192876309e2615abffb544cbe">convert_bool_to_double<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00187"><\/a><span class="lineno">  187<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00188"><\/a><span class="lineno">  188<\/span>&#160;    <a class="code" href="classDataFrame_1_1Grouper.html">Grouper&lt;T&gt;<\/a> groupby();<\/div><div class="line"><a name="l00189"><\/a><span class="lineno">  189<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00190"><\/a><span class="lineno">  190<\/span>&#160;    <a class="code" href="classDataFrame_1_1Grouper.html">Grouper&lt;T&gt;<\/a> groupby(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00191"><\/a><span class="lineno">  191<\/span>&#160;<\/div><div class="line"><a name="l00192"><\/a><span class="lineno">  192<\/span>&#160;   <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00193"><\/a><span class="lineno">  193<\/span>&#160;    std::vector&lt;std::shared_ptr&lt;Column&gt;&gt; columns;<\/div><div class="line"><a name="l00194"><\/a><span class="lineno">  194<\/span>&#160;    std::unordered_map&lt;std::string, std::deque&lt;int&gt;&gt; index_names;<\/div><div class="line"><a name="l00195"><\/a><span class="lineno">  195<\/span>&#160;    std::vector&lt;std::string&gt; index_positions;<\/div><div class="line"><a name="l00196"><\/a><span class="lineno">  196<\/span>&#160;    std::map&lt;std::string, int&gt; column_names;<\/div><div class="line"><a name="l00197"><\/a><span class="lineno">  197<\/span>&#160;    <span class="keywordtype">void<\/span> append_duplicate_rows(std::deque&lt;std::pair&lt;int, int&gt;&gt;&amp;);<\/div><div class="line"><a name="l00198"><\/a><span class="lineno">  198<\/span>&#160;    <span class="keywordtype">void<\/span> append_duplicate_rows(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00199"><\/a><span class="lineno">  199<\/span>&#160;    <span class="keywordtype">void<\/span> copy_row(<span class="keywordtype">int<\/span>);<\/div><div class="line"><a name="l00200"><\/a><span class="lineno">  200<\/span>&#160;    <span class="keywordtype">void<\/span> make_unique_if(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00201"><\/a><span class="lineno">  201<\/span>&#160;    <span class="keywordtype">void<\/span> make_unique_if(<span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;);<\/div><div class="line"><a name="l00202"><\/a><span class="lineno">  202<\/span>&#160;    <span class="keywordtype">void<\/span> assert_same_column_length(<span class="keyword">const<\/span> <span class="keywordtype">char<\/span>*);<\/div><div class="line"><a name="l00203"><\/a><span class="lineno">  203<\/span>&#160;    <span class="keywordtype">void<\/span> append_missing_cols(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00204"><\/a><span class="lineno">  204<\/span>&#160;    <span class="keywordtype">void<\/span> append_missing_rows(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00205"><\/a><span class="lineno">  205<\/span>&#160;    <span class="keywordtype">void<\/span> append_nan_rows();<\/div><div class="line"><a name="l00210"><\/a><span class="lineno">  210<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#aec1676a627594d227b776cf78fad9825">append_column<\/a>(<span class="keyword">const<\/span> std::string&amp;, <span class="keyword">const<\/span> SharedCol&amp;);<\/div><div class="line"><a name="l00211"><\/a><span class="lineno">  211<\/span>&#160;    <span class="keywordtype">void<\/span> append_index(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00215"><\/a><span class="lineno">  215<\/span>&#160;    <span class="keywordtype">void<\/span> append_index(<span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;);<\/div><div class="line"><a name="l00216"><\/a><span class="lineno">  216<\/span>&#160;    <span class="comment">\/\/void append_index(std::vector&lt;std::string&gt;::iterator, <\/span><\/div><div class="line"><a name="l00217"><\/a><span class="lineno">  217<\/span>&#160;                      <span class="comment">\/\/std::vector&lt;std::string&gt;::iterator);<\/span><\/div><div class="line"><a name="l00218"><\/a><span class="lineno">  218<\/span>&#160;    std::vector&lt;std::string&gt; frame(<a class="code" href="classColumn.html">Column<\/a>&amp; c);<\/div><div class="line"><a name="l00219"><\/a><span class="lineno">  219<\/span>&#160;    std::vector&lt;int&gt; contains_null();<\/div><div class="line"><a name="l00220"><\/a><span class="lineno">  220<\/span>&#160;    <span class="keywordtype">void<\/span> make_unique(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00221"><\/a><span class="lineno">  221<\/span>&#160;    <span class="keywordtype">void<\/span> make_unique(<span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;);<\/div><div class="line"><a name="l00222"><\/a><span class="lineno">  222<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00223"><\/a><span class="lineno">  223<\/span>&#160;    std::vector&lt;int&gt; permutation_index(<span class="keyword">const<\/span> std::string&amp; s);<\/div><div class="line"><a name="l00228"><\/a><span class="lineno">  228<\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="classDataFrame.html#a24a13f1ad2e723ad048e1486d335191a">find_column_position<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00229"><\/a><span class="lineno">  229<\/span>&#160;    <span class="keywordtype">int<\/span> <a class="code" href="classDataFrame.html#a24a13f1ad2e723ad048e1486d335191a">find_column_position<\/a>(<span class="keyword">const<\/span> std::string&amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00230"><\/a><span class="lineno">  230<\/span>&#160;    std::deque&lt;int&gt; find_index_position() <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00231"><\/a><span class="lineno">  231<\/span>&#160;    std::deque&lt;int&gt; find_index_position();<\/div><div class="line"><a name="l00235"><\/a><span class="lineno">  235<\/span>&#160;    std::deque&lt;int&gt; find_index_position(<span class="keyword">const<\/span> std::string&amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00236"><\/a><span class="lineno">  236<\/span>&#160;    std::deque&lt;int&gt; find_index_position(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00240"><\/a><span class="lineno">  240<\/span>&#160;    SharedCol <a class="code" href="classDataFrame.html#a6386fb76796f1f414311486aa5f253be">get_shared_copy<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00244"><\/a><span class="lineno">  244<\/span>&#160;    SharedCol <a class="code" href="classDataFrame.html#a6386fb76796f1f414311486aa5f253be">get_shared_copy<\/a>(<span class="keyword">const<\/span> std::string&amp;) <span class="keyword">const<\/span>;<\/div><div class="line"><a name="l00248"><\/a><span class="lineno">  248<\/span>&#160;    std::vector&lt;std::string&gt; <a class="code" href="classDataFrame.html#ad65521a6929933f95823efa3e5a095e9">create_column_names<\/a>(std::ifstream&amp;);<\/div><div class="line"><a name="l00253"><\/a><span class="lineno">  253<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#a207e76c73a757f4a2ba9013de8beaec5">initialize_column<\/a>(std::ifstream&amp;, <span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;);<\/div><div class="line"><a name="l00257"><\/a><span class="lineno">  257<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00258"><\/a><span class="lineno">  258<\/span>&#160;    <span class="keywordtype">void<\/span> <a class="code" href="classDataFrame.html#a207e76c73a757f4a2ba9013de8beaec5">initialize_column<\/a>(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00259"><\/a><span class="lineno">  259<\/span>&#160;    <span class="keywordtype">void<\/span> insert_data(std::ifstream&amp;, <span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;);<\/div><div class="line"><a name="l00260"><\/a><span class="lineno">  260<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00261"><\/a><span class="lineno">  261<\/span>&#160;    <span class="keywordtype">void<\/span> sort_by_column_template(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00262"><\/a><span class="lineno">  262<\/span>&#160;};<\/div><div class="line"><a name="l00263"><\/a><span class="lineno">  263<\/span>&#160;<\/div><div class="line"><a name="l00270"><\/a><span class="lineno">  270<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00271"><\/a><span class="lineno">  271<\/span>&#160;<a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> T&amp;);<\/div><div class="line"><a name="l00272"><\/a><span class="lineno">  272<\/span>&#160;<a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00273"><\/a><span class="lineno">  273<\/span>&#160;<a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrame::DataFrameProxy<\/a>&amp;);<\/div><div class="line"><a name="l00280"><\/a><span class="lineno">  280<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00281"><\/a><span class="lineno">  281<\/span>&#160;<a class="code" href="classDataFrame.html">DataFrame<\/a> <a class="code" href="classDataFrame.html#a8c08b940f5d6a095ac079ef277133c1a">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> T&amp;);<\/div><div class="line"><a name="l00282"><\/a><span class="lineno">  282<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00283"><\/a><span class="lineno">  283<\/span>&#160;<a class="code" href="classDataFrame.html">DataFrame<\/a> operator&gt;(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> T&amp;);<\/div><div class="line"><a name="l00284"><\/a><span class="lineno">  284<\/span>&#160;<a class="code" href="classDataFrame.html">DataFrame<\/a> deep_copy(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00285"><\/a><span class="lineno">  285<\/span>&#160;std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00286"><\/a><span class="lineno">  286<\/span>&#160;std::deque&lt;std::pair&lt;int, int&gt;&gt; correspondence_position(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;,<\/div><div class="line"><a name="l00287"><\/a><span class="lineno">  287<\/span>&#160;                                                         <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00294"><\/a><span class="lineno">  294<\/span>&#160;<span class="keywordtype">void<\/span> append_missing_rows(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00301"><\/a><span class="lineno">  301<\/span>&#160;<span class="keywordtype">void<\/span> append_missing_cols(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00302"><\/a><span class="lineno">  302<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDataFrame_html_a207e76c73a757f4a2ba9013de8beaec5"><div class="ttname"><a href="classDataFrame.html#a207e76c73a757f4a2ba9013de8beaec5">DataFrame::initialize_column<\/a><\/div><div class="ttdeci">void initialize_column(std::ifstream &amp;, const std::vector&lt; std::string &gt; &amp;)<\/div><div class="ttdoc">Initilizes the Columns with the datatypes mentiond in the second line of the csv file. <\/div><\/div>$/;"	a
l00001	documentation/html/dataframeproxy_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GUARD_DataFrameProxy_h<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GUARD_DataFrameProxy_h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &quot;dataframe.h&quot;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<\/div><div class="line"><a name="l00005"><\/a><span class="lineno"><a class="line" href="classDataFrame_1_1DataFrameProxy.html">    5<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrame::DataFrameProxy<\/a> {<\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00007"><\/a><span class="lineno">    7<\/span>&#160;    <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="classDataFrame.html">DataFrame<\/a>;<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>();<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;,<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;                   <span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;,<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;                   <span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;);<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;);<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp; operator=(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp; operator=(<span class="keyword">const<\/span> std::vector&lt;std::vector&lt;double&gt;&gt;&amp;);<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;    <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp; operator=(<span class="keyword">const<\/span> std::vector&lt;T&gt;&amp;);<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;    ~<a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>() = <span class="keywordflow">default<\/span>;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno">   19<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;);<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp;);<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> <a class="code" href="classDataFrame.html#a8c08b940f5d6a095ac079ef277133c1a">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp; lhs, <span class="keyword">const<\/span> T&amp; t) {<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;        <a class="code" href="classDataFrame.html">DataFrame<\/a> copy = deep_copy(<a class="code" href="classDataFrame.html">DataFrame<\/a>(lhs));<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordflow">return<\/span> copy &lt; t;<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;    }<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;    <span class="keyword">friend<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a> operator&gt;(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrameProxy<\/a>&amp; lhs, <span class="keyword">const<\/span> T&amp; t) {<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        <a class="code" href="classDataFrame.html">DataFrame<\/a> copy = deep_copy(<a class="code" href="classDataFrame.html">DataFrame<\/a>(lhs));<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;        <span class="comment">\/\/ I DO COPY THAT STUFF TWICE!!!<\/span><\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;        <span class="keywordflow">return<\/span> copy &gt; t;<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;    }<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno">   33<\/span>&#160;   <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; theDataFrame;<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    std::vector&lt;std::string&gt; idxNames;<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    std::vector&lt;std::string&gt; colNames;<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;    <span class="keywordtype">void<\/span> add_column(<span class="keyword">const<\/span> std::shared_ptr&lt;Column&gt;&amp;);<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;    <span class="keywordtype">void<\/span> replace_column(<span class="keywordtype">int<\/span>, <span class="keyword">const<\/span> std::shared_ptr&lt;Column&gt;&amp;);<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    <span class="keywordtype">void<\/span> check_col_width(<span class="keywordtype">size_t<\/span>, std::string);<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    <span class="keywordtype">void<\/span> check_col_len(<span class="keywordtype">size_t<\/span>, std::string);<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;    <span class="keywordtype">void<\/span> insert_column(<span class="keyword">const<\/span> std::string&amp;, std::shared_ptr&lt;Column&gt;&amp;);<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> T&gt;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;    <span class="keywordtype">void<\/span> insert_column(<span class="keyword">const<\/span> std::string&amp;, <span class="keyword">const<\/span> std::vector&lt;T&gt;&amp;);<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;    <span class="keywordtype">void<\/span> insert_column(<span class="keyword">const<\/span> std::vector&lt;std::string&gt;&amp;, <span class="keyword">const<\/span> <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;};<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;<a class="code" href="classDataFrame.html">DataFrame<\/a> operator+(<span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrame::DataFrameProxy<\/a>&amp;,<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;                    <span class="keyword">const<\/span> <a class="code" href="classDataFrame_1_1DataFrameProxy.html">DataFrame::DataFrameProxy<\/a>&amp;);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classDataFrame_1_1DataFrameProxy_html"><div class="ttname"><a href="classDataFrame_1_1DataFrameProxy.html">DataFrame::DataFrameProxy<\/a><\/div><div class="ttdef"><b>Definition:<\/b> dataframeproxy.h:5<\/div><\/div>$/;"	a
l00001	documentation/html/grouper_8h_source.html	/^<div class="fragment"><div class="line"><a name="l00001"><\/a><span class="lineno">    1<\/span>&#160;<span class="preprocessor">#ifndef GUARD_Grouper_h<\/span><\/div><div class="line"><a name="l00002"><\/a><span class="lineno">    2<\/span>&#160;<span class="preprocessor">#define GUARD_Grouper_h<\/span><\/div><div class="line"><a name="l00003"><\/a><span class="lineno">    3<\/span>&#160;<span class="preprocessor">#include &lt;functional&gt;<\/span><\/div><div class="line"><a name="l00004"><\/a><span class="lineno">    4<\/span>&#160;<span class="preprocessor">#include &lt;numeric&gt;<\/span><\/div><div class="line"><a name="l00005"><\/a><span class="lineno">    5<\/span>&#160;<span class="preprocessor">#include &quot;dataframe.h&quot;<\/span><\/div><div class="line"><a name="l00006"><\/a><span class="lineno">    6<\/span>&#160;<\/div><div class="line"><a name="l00007"><\/a><span class="lineno"><a class="line" href="classStatistic.html">    7<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classStatistic.html">Statistic<\/a> {<\/div><div class="line"><a name="l00008"><\/a><span class="lineno">    8<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00009"><\/a><span class="lineno">    9<\/span>&#160;    <a class="code" href="classStatistic.html">Statistic<\/a>() : type_name(<span class="stringliteral">&quot;double&quot;<\/span>) {}<\/div><div class="line"><a name="l00010"><\/a><span class="lineno">   10<\/span>&#160;    <span class="keyword">virtual<\/span> <span class="keywordtype">double<\/span> func(<span class="keyword">const<\/span> std::deque&lt;int&gt;&amp;, <span class="keyword">const<\/span> DataFrame::SharedCol&amp;) {<\/div><div class="line"><a name="l00011"><\/a><span class="lineno">   11<\/span>&#160;        <span class="keywordflow">return<\/span> std::numeric_limits&lt;double&gt;::quiet_NaN();<\/div><div class="line"><a name="l00012"><\/a><span class="lineno">   12<\/span>&#160;    }<\/div><div class="line"><a name="l00013"><\/a><span class="lineno">   13<\/span>&#160;    <span class="keyword">virtual<\/span> std::string get_name() { <span class="keywordflow">return<\/span> type_name; }<\/div><div class="line"><a name="l00014"><\/a><span class="lineno">   14<\/span>&#160;<\/div><div class="line"><a name="l00015"><\/a><span class="lineno">   15<\/span>&#160;   <span class="keyword">protected<\/span>:<\/div><div class="line"><a name="l00016"><\/a><span class="lineno">   16<\/span>&#160;    std::string type_name;<\/div><div class="line"><a name="l00017"><\/a><span class="lineno">   17<\/span>&#160;};<\/div><div class="line"><a name="l00018"><\/a><span class="lineno">   18<\/span>&#160;<\/div><div class="line"><a name="l00019"><\/a><span class="lineno"><a class="line" href="classmean.html">   19<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classmean.html">mean<\/a> : <span class="keyword">public<\/span> <a class="code" href="classStatistic.html">Statistic<\/a> {<\/div><div class="line"><a name="l00020"><\/a><span class="lineno">   20<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00021"><\/a><span class="lineno">   21<\/span>&#160;    <a class="code" href="classmean.html">mean<\/a>(std::string type = <span class="stringliteral">&quot;double&quot;<\/span>) { type_name = type; }<\/div><div class="line"><a name="l00022"><\/a><span class="lineno">   22<\/span>&#160;    <span class="keywordtype">double<\/span> func(<span class="keyword">const<\/span> std::deque&lt;int&gt;&amp; pos,<\/div><div class="line"><a name="l00023"><\/a><span class="lineno">   23<\/span>&#160;                <span class="keyword">const<\/span> DataFrame::SharedCol&amp; col)<span class="keyword"> override <\/span>{<\/div><div class="line"><a name="l00024"><\/a><span class="lineno">   24<\/span>&#160;        <span class="keywordtype">double<\/span> res = std::accumulate(<\/div><div class="line"><a name="l00025"><\/a><span class="lineno">   25<\/span>&#160;            pos.begin(), pos.end(), 0.,<\/div><div class="line"><a name="l00026"><\/a><span class="lineno">   26<\/span>&#160;            [&amp;](<span class="keywordtype">double<\/span> o, <span class="keywordtype">int<\/span> i) { <span class="keywordflow">return<\/span> o + col-&gt;get_value&lt;<span class="keywordtype">double<\/span>&gt;(i); });<\/div><div class="line"><a name="l00027"><\/a><span class="lineno">   27<\/span>&#160;        res \/= pos.size();<\/div><div class="line"><a name="l00028"><\/a><span class="lineno">   28<\/span>&#160;        <span class="keywordflow">return<\/span> res;<\/div><div class="line"><a name="l00029"><\/a><span class="lineno">   29<\/span>&#160;    }<\/div><div class="line"><a name="l00030"><\/a><span class="lineno">   30<\/span>&#160;    std::string get_name()<span class="keyword"> override <\/span>{ <span class="keywordflow">return<\/span> type_name; }<\/div><div class="line"><a name="l00031"><\/a><span class="lineno">   31<\/span>&#160;};<\/div><div class="line"><a name="l00032"><\/a><span class="lineno">   32<\/span>&#160;<\/div><div class="line"><a name="l00033"><\/a><span class="lineno"><a class="line" href="classcount.html">   33<\/a><\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classcount.html">count<\/a> : <span class="keyword">public<\/span> <a class="code" href="classStatistic.html">Statistic<\/a> {<\/div><div class="line"><a name="l00034"><\/a><span class="lineno">   34<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00035"><\/a><span class="lineno">   35<\/span>&#160;    <a class="code" href="classcount.html">count<\/a>(std::string type = <span class="stringliteral">&quot;string&quot;<\/span>) { type_name = type; }<\/div><div class="line"><a name="l00036"><\/a><span class="lineno">   36<\/span>&#160;    <span class="keywordtype">double<\/span> func(<span class="keyword">const<\/span> std::deque&lt;int&gt;&amp; pos,<\/div><div class="line"><a name="l00037"><\/a><span class="lineno">   37<\/span>&#160;                <span class="keyword">const<\/span> DataFrame::SharedCol&amp; col)<span class="keyword"> override <\/span>{<\/div><div class="line"><a name="l00038"><\/a><span class="lineno">   38<\/span>&#160;        <span class="keywordflow">return<\/span> pos.size();<\/div><div class="line"><a name="l00039"><\/a><span class="lineno">   39<\/span>&#160;    }<\/div><div class="line"><a name="l00040"><\/a><span class="lineno">   40<\/span>&#160;    std::string get_name()<span class="keyword"> override <\/span>{ <span class="keywordflow">return<\/span> type_name; }<\/div><div class="line"><a name="l00041"><\/a><span class="lineno">   41<\/span>&#160;};<\/div><div class="line"><a name="l00042"><\/a><span class="lineno">   42<\/span>&#160;<\/div><div class="line"><a name="l00043"><\/a><span class="lineno">   43<\/span>&#160;<span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> T&gt;<\/div><div class="line"><a name="l00044"><\/a><span class="lineno">   44<\/span>&#160;<span class="keyword">class <\/span><a class="code" href="classDataFrame_1_1Grouper.html">DataFrame::Grouper<\/a> {<\/div><div class="line"><a name="l00045"><\/a><span class="lineno">   45<\/span>&#160;   <span class="keyword">public<\/span>:<\/div><div class="line"><a name="l00046"><\/a><span class="lineno">   46<\/span>&#160;    Grouper(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;);<\/div><div class="line"><a name="l00047"><\/a><span class="lineno">   47<\/span>&#160;    Grouper(<a class="code" href="classDataFrame.html">DataFrame<\/a>&amp;, <span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00048"><\/a><span class="lineno">   48<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a> summarize(<a class="code" href="classStatistic.html">Statistic<\/a>*);<\/div><div class="line"><a name="l00049"><\/a><span class="lineno">   49<\/span>&#160;<\/div><div class="line"><a name="l00050"><\/a><span class="lineno">   50<\/span>&#160;   <span class="keyword">private<\/span>:<\/div><div class="line"><a name="l00051"><\/a><span class="lineno">   51<\/span>&#160;    std::vector&lt;std::string&gt; elegible_types(<span class="keyword">const<\/span> std::string&amp;);<\/div><div class="line"><a name="l00052"><\/a><span class="lineno">   52<\/span>&#160;    <a class="code" href="classDataFrame.html">DataFrame<\/a>&amp; theDataFrame;<\/div><div class="line"><a name="l00053"><\/a><span class="lineno">   53<\/span>&#160;    std::unordered_map&lt;std::string, std::deque&lt;int&gt;&gt; old_index_names;<\/div><div class="line"><a name="l00054"><\/a><span class="lineno">   54<\/span>&#160;    std::vector&lt;std::string&gt; index_positions;<\/div><div class="line"><a name="l00055"><\/a><span class="lineno">   55<\/span>&#160;    std::map&lt;std::string, int&gt; column_names;<\/div><div class="line"><a name="l00056"><\/a><span class="lineno">   56<\/span>&#160;    <span class="keywordtype">void<\/span> make_index_unique();<\/div><div class="line"><a name="l00057"><\/a><span class="lineno">   57<\/span>&#160;};<\/div><div class="line"><a name="l00058"><\/a><span class="lineno">   58<\/span>&#160;<span class="preprocessor">#endif<\/span><\/div><div class="ttc" id="classStatistic_html"><div class="ttname"><a href="classStatistic.html">Statistic<\/a><\/div><div class="ttdef"><b>Definition:<\/b> grouper.h:7<\/div><\/div>$/;"	a
latex_count	documentation/latex/Makefile	/^	latex_count=8 ; \\$/;"	m
letter_c	documentation/html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_c"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;c&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_d	documentation/html/classes.html	/^<tr><td valign="top"><a class="el" href="classColumn.html">Column<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_d"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;d&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_g	documentation/html/classes.html	/^<tr><td valign="top"><a class="el" href="classcount.html">count<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_g"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;g&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_m	documentation/html/classes.html	/^<\/td><td valign="top"><a class="el" href="classDataFrame_1_1ConstColumnIterator.html">DataFrame::ConstColumnIterator<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classDataFrame_1_1DataFrameProxy.html">DataFrame::DataFrameProxy<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_m"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;m&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_s	documentation/html/classes.html	/^<tr><td valign="top"><a class="el" href="classDataFrame_1_1ColumnIterator.html">DataFrame::ColumnIterator<\/a>&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="classDataFrame_1_1Grouper.html">DataFrame::Grouper<\/a>&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_s"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;s&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
line	test/catch.hpp	/^            line( _line )$/;"	f	struct:Catch::SourceLineInfo
line	test/catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
lineInfo	test/catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
m_args	test/catch.hpp	/^        std::vector<Arg> m_args;$/;"	m	struct:Catch::Parser
m_data	test/catch.hpp	/^            m_data( other.m_data )$/;"	f	class:Catch::StringRef
m_data	test/catch.hpp	/^        char* m_data = nullptr;$/;"	m	class:Catch::StringRef
m_description	test/catch.hpp	/^        std::string m_description;$/;"	m	class:Catch::ParserRefImpl
m_exeName	test/catch.hpp	/^        mutable ExeName m_exeName;$/;"	m	struct:Catch::Parser
m_hint	test/catch.hpp	/^        std::string m_hint;$/;"	m	class:Catch::ParserRefImpl
m_index	test/catch.hpp	/^        std::size_t m_index;$/;"	m	class:Catch::ReusableStringStream
m_name	test/catch.hpp	/^            StringRef m_name;$/;"	m	struct:Catch::Detail::EnumInfo
m_name	test/catch.hpp	/^        std::shared_ptr<std::string> m_name;$/;"	m	class:Catch::ExeName
m_optNames	test/catch.hpp	/^        std::vector<std::string> m_optNames;$/;"	m	class:Catch::Opt
m_optionality	test/catch.hpp	/^        Optionality m_optionality = Optionality::Optional;$/;"	m	class:Catch::ParserRefImpl
m_options	test/catch.hpp	/^        std::vector<Opt> m_options;$/;"	m	struct:Catch::Parser
m_oss	test/catch.hpp	/^        std::ostream* m_oss;$/;"	m	class:Catch::ReusableStringStream
m_ref	test/catch.hpp	/^        std::shared_ptr<BoundRef> m_ref;$/;"	m	class:Catch::ParserRefImpl
m_ref	test/catch.hpp	/^        std::shared_ptr<BoundValueRefBase> m_ref;$/;"	m	class:Catch::ExeName
m_size	test/catch.hpp	/^            m_size( other.m_size )$/;"	f	class:Catch::StringRef
m_size	test/catch.hpp	/^            m_size( size )$/;"	f	class:Catch::StringRef
m_size	test/catch.hpp	/^            m_size( stdString.size() )$/;"	f	class:Catch::StringRef
m_size	test/catch.hpp	/^        size_type m_size;$/;"	m	class:Catch::StringRef
m_start	test/catch.hpp	/^        char const* m_start;$/;"	m	class:Catch::StringRef
m_testAsMethod	test/catch.hpp	/^    TestInvokerAsMethod( void (C::*testAsMethod)() ) noexcept : m_testAsMethod( testAsMethod ) {}$/;"	f	class:Catch::TestInvokerAsMethod
m_testAsMethod	test/catch.hpp	/^    void (C::*m_testAsMethod)();$/;"	m	class:Catch::TestInvokerAsMethod
m_values	test/catch.hpp	/^            std::vector<std::pair<int, std::string>> m_values;$/;"	m	struct:Catch::Detail::EnumInfo
macroName	test/catch.hpp	/^        StringRef macroName;$/;"	m	struct:Catch::AssertionInfo
mae_ch	simply_example.py	/^mae_ch = {}$/;"	v
maes	simply_example.py	/^maes = get_mae(df)$/;"	v
main	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/feature_tests.c	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	build/CMakeFiles/feature_tests.cxx	/^int main(int argc, char** argv) { (void)argv; return features[argc]; }$/;"	f
main	main.cpp	/^int main() {$/;"	f
main	old_main.cpp	/^int main() {$/;"	f
main	save_main.cpp	/^int main() {$/;"	f
main	test/mae_example.cpp	/^int main() {$/;"	f
main	test/old_main.cpp	/^int main() {$/;"	f
main	test/operator_test.cpp	/^int main() {$/;"	f
makeTree	documentation/html/menu.js	/^  function makeTree(data,relPath) {$/;"	f	function:initMenu
make_contigious	dataframe/dataframe.cpp	/^void DataFrame::make_contigious() {$/;"	f	class:DataFrame
make_index_unique	dataframe/grouper.cpp	/^void DataFrame::Grouper<T>::make_index_unique() {$/;"	f	class:DataFrame::Grouper
make_unique	dataframe/dataframe.cpp	/^void DataFrame::make_unique(const std::string& s) {$/;"	f	class:DataFrame
make_unique	dataframe/dataframe.cpp	/^void DataFrame::make_unique(const std::vector<string>& vec) {$/;"	f	class:DataFrame
make_unique_if	dataframe/dataframe.cpp	/^void DataFrame::make_unique_if(const std::string& s) {$/;"	f	class:DataFrame
make_unique_if	dataframe/dataframe.cpp	/^void DataFrame::make_unique_if(const vector<string>& c) {$/;"	f	class:DataFrame
maybe_add	dataframe/operators.cpp	/^bool maybe_add(const string& name, std::map<string, int>& columns) {$/;"	f
mean	dataframe/GroupbyFunctions.h	/^    mean(std::string type = "double") { type_name = type; }$/;"	f	class:mean
mean	dataframe/GroupbyFunctions.h	/^class mean : public Statistic {$/;"	c
mean Class Reference	documentation/latex/classmean.tex	/^\\hypertarget{classmean}{}\\section{mean Class Reference}$/;"	s
missing_col_error	dataframe/dataframe.cpp	/^void missing_col_error(const char* what, string s) {$/;"	f
name	test/catch.hpp	/^    StringRef name;$/;"	m	struct:Catch::NameAndTags
nested-classes	documentation/html/classDataFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"><\/a>$/;"	a
noexcept	test/catch.hpp	/^        SourceLineInfo& operator = ( SourceLineInfo&& ) noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	test/catch.hpp	/^        SourceLineInfo( SourceLineInfo&& )              noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	test/catch.hpp	/^        SourceLineInfo( char const* _file, std::size_t _line ) noexcept$/;"	m	struct:Catch::SourceLineInfo
noexcept	test/catch.hpp	/^        StringRef( char const* rawChars ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	test/catch.hpp	/^        bool empty() const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	test/catch.hpp	/^        bool operator < ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	test/catch.hpp	/^        bool operator == ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	test/catch.hpp	/^        void swap( StringRef& other ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	test/catch.hpp	/^    AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;$/;"	m	struct:Catch::AutoReg
noexcept	test/catch.hpp	/^    NameAndTags( StringRef const& name_ = StringRef(), StringRef const& tags_ = StringRef() ) noexcept;$/;"	m	struct:Catch::NameAndTags
old_index_names	dataframe/grouper.h	/^    std::map<std::deque<Index::ele>, std::deque<int>> old_index_names;$/;"	m	class:DataFrame::Grouper
operator !=	dataframe/ColumnIterator.h	/^bool operator!=(const DataFrame::ColumnIterator<T>& lhs,$/;"	f
operator !=	dataframe/ConstColumnIterator.h	/^bool operator!=(const DataFrame::ConstColumnIterator<T>& lhs,$/;"	f
operator *	dataframe/ColumnIterator.h	/^T& DataFrame::ColumnIterator<T>::operator*() const {$/;"	f	class:DataFrame::ColumnIterator
operator *	dataframe/ConstColumnIterator.h	/^const T& DataFrame::ConstColumnIterator<T>::operator*() const {$/;"	f	class:DataFrame::ConstColumnIterator
operator +	dataframe/column.cpp	/^Column operator+(const Column& c, const string& d) {$/;"	f
operator +	dataframe/column.cpp	/^Column operator+(const Column& c, double d) {$/;"	f
operator +	dataframe/dataframe.h	/^    friend DataFrame operator+(const DataFrame& lhs, const T& t) {$/;"	f	class:DataFrame
operator +	dataframe/operators.cpp	/^DataFrame operator+(const DataFrame& lhs, const DataFrame& rhs) {$/;"	f
operator +	dataframe/operators.cpp	/^DataFrame operator+(const DataFrame& lhs,$/;"	f
operator +	dataframe/operators.cpp	/^DataFrame operator+(const DataFrame::DataFrameProxy& lhs,$/;"	f
operator +	test/catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator ++	dataframe/ColumnIterator.h	/^DataFrame::ColumnIterator<T> DataFrame::ColumnIterator<T>::operator++(int) {$/;"	f	class:DataFrame::ColumnIterator
operator ++	dataframe/ColumnIterator.h	/^DataFrame::ColumnIterator<T>& DataFrame::ColumnIterator<T>::operator++() {$/;"	f	class:DataFrame::ColumnIterator
operator ++	dataframe/ConstColumnIterator.h	/^DataFrame::const_iter<T> DataFrame::ConstColumnIterator<T>::operator++(int) {$/;"	f	class:DataFrame::ConstColumnIterator
operator ++	dataframe/ConstColumnIterator.h	/^DataFrame::const_iter<T>& DataFrame::ConstColumnIterator<T>::operator++() {$/;"	f	class:DataFrame::ConstColumnIterator
operator +=	dataframe/operators.cpp	/^DataFrame& DataFrame::operator+=(const DataFrame& rhs) {$/;"	f	class:DataFrame
operator +=	dataframe/operators.cpp	/^DataFrame& DataFrame::operator+=(const T& t) {$/;"	f	class:DataFrame
operator --	dataframe/ColumnIterator.h	/^DataFrame::ColumnIterator<T> DataFrame::ColumnIterator<T>::operator--(int) {$/;"	f	class:DataFrame::ColumnIterator
operator --	dataframe/ColumnIterator.h	/^DataFrame::ColumnIterator<T>& DataFrame::ColumnIterator<T>::operator--() {$/;"	f	class:DataFrame::ColumnIterator
operator --	dataframe/ConstColumnIterator.h	/^DataFrame::const_iter<T> DataFrame::ConstColumnIterator<T>::operator--(int) {$/;"	f	class:DataFrame::ConstColumnIterator
operator --	dataframe/ConstColumnIterator.h	/^DataFrame::const_iter<T>& DataFrame::ConstColumnIterator<T>::operator--() {$/;"	f	class:DataFrame::ConstColumnIterator
operator <	dataframe/dataframe.h	/^    friend DataFrame operator<(const DataFrame& lhs, const T& t) {$/;"	f	class:DataFrame
operator <	dataframe/dataframeproxy.h	/^    friend DataFrame operator<(const DataFrameProxy& lhs, const T& t) {$/;"	f	class:DataFrame::DataFrameProxy
operator <<	dataframe/print.cpp	/^std::ostream& operator<<(std::ostream& os, const DataFrame& df) {$/;"	f
operator =	dataframe/operators.cpp	/^DataFrame& DataFrame::operator=(const DataFrame& rhs) {$/;"	f	class:DataFrame
operator =	dataframe/operators.cpp	/^DataFrame::DataFrameProxy& DataFrame::DataFrameProxy::operator=($/;"	f	class:DataFrame::DataFrameProxy
operator ==	dataframe/ColumnIterator.h	/^bool operator==(const DataFrame::ColumnIterator<T>& lhs,$/;"	f
operator ==	dataframe/ConstColumnIterator.h	/^bool operator==(const DataFrame::ConstColumnIterator<T>& lhs,$/;"	f
operator >	dataframe/dataframe.h	/^    friend DataFrame operator>(const DataFrame& lhs, const T& t) {$/;"	f	class:DataFrame
operator >	dataframe/dataframeproxy.h	/^    friend DataFrame operator>(const DataFrameProxy& lhs, const T& t) {$/;"	f	class:DataFrame::DataFrameProxy
operator []	dataframe/ColumnIterator.h	/^T& DataFrame::ColumnIterator<T>::operator[](int i) {$/;"	f	class:DataFrame::ColumnIterator
operator []	dataframe/ConstColumnIterator.h	/^const T& DataFrame::ConstColumnIterator<T>::operator[](int i) const {$/;"	f	class:DataFrame::ConstColumnIterator
operator []	dataframe/operators.cpp	/^DataFrame::DataFrameProxy DataFrame::operator[](const string& name) {$/;"	f	class:DataFrame
operator []	dataframe/operators.cpp	/^DataFrame::DataFrameProxy DataFrame::operator[](const vector<string>& names) {$/;"	f	class:DataFrame
ostream	test/catch.hpp	/^    auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;$/;"	m	class:Catch::std
other	test/catch.hpp	/^        SourceLineInfo( SourceLineInfo const& other )            = default;$/;"	m	struct:Catch::SourceLineInfo
partition_pairs	dataframe/ConstColumnIterator.h	/^typename std::vector<std::pair<int, T>>::iterator partition_pairs($/;"	f
performOptionalSelector	test/catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
permutation_index	dataframe/ConstColumnIterator.h	/^std::vector<int> DataFrame::permutation_index(const std::string& s) {$/;"	f	class:DataFrame
plus	dataframe/column.cpp	/^Column& Column::plus(const Column& rhs, const deque<pair<int, int>>& indices) {$/;"	f	class:Column
pop_and_return	dataframe/index.cpp	/^int pop_and_return(const deque<Index::ele>& val, Index::index_map_type& inp) {$/;"	f
potential_na	dataframe/column.cpp	/^bool potential_na(const std::string& s) {$/;"	f
precision	test/catch.hpp	/^        static int precision;$/;"	m	struct:Catch::StringMaker
pri-attribs	documentation/html/classColumn.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	documentation/html/classDataFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	documentation/html/classDataFrame_1_1ColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	documentation/html/classDataFrame_1_1ConstColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	documentation/html/classDataFrame_1_1DataFrameProxy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	documentation/html/classDataFrame_1_1Grouper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-attribs"><\/a>$/;"	a
pri-methods	documentation/html/classColumn.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-methods	documentation/html/classDataFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-methods	documentation/html/classDataFrame_1_1ColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-methods	documentation/html/classDataFrame_1_1ConstColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-methods	documentation/html/classDataFrame_1_1DataFrameProxy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-methods	documentation/html/classDataFrame_1_1Grouper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"><\/a>$/;"	a
pri-types	documentation/html/classColumn.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-types"><\/a>$/;"	a
pro-attribs	documentation/html/classStatistic.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"><\/a>$/;"	a
pub-methods	documentation/html/classColumn.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classDataFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classDataFrame_1_1ColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classDataFrame_1_1ConstColumnIterator.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classDataFrame_1_1DataFrameProxy.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classDataFrame_1_1Grouper.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classStatistic.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classcount.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-methods	documentation/html/classmean.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"><\/a>$/;"	a
pub-types	documentation/html/classDataFrame.html	/^<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"><\/a>$/;"	a
push_back	dataframe/column.cpp	/^void Column::push_back(const T t) {$/;"	f	class:Column
push_back_nan	dataframe/column.cpp	/^void Column::push_back_nan() {$/;"	f	class:Column
qnxnto	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
qnxnto	build/CMakeFiles/3.10.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v
rangeToString	test/catch.hpp	/^        std::string rangeToString(InputIterator first, InputIterator last) {$/;"	f	namespace:Catch::Detail
rawMemoryToString	test/catch.hpp	/^        std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
registerEnum	test/catch.hpp	/^        Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list<E> values ) {$/;"	f	class:Catch::IMutableEnumValuesRegistry::Detail
remove_value	dataframe/index.cpp	/^void Index::remove_value(size_t pos, std::deque<ele>& t) {$/;"	f	class:Index
replace_column	dataframe/operators.cpp	/^void DataFrame::DataFrameProxy::replace_column(int idx,$/;"	f	class:DataFrame::DataFrameProxy
replace_nan	dataframe/column.cpp	/^void Column::replace_nan() {$/;"	f	class:Column
replace_nan	dataframe/column.cpp	/^void Column::replace_nan(int i) {$/;"	f	class:Column
resultDisposition	test/catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
rhs_truncate	dataframe/print.cpp	/^vector<string> rhs_truncate(vector<string> inp) {$/;"	f
s_empty	test/catch.hpp	/^        static constexpr char const* const s_empty = "";$/;"	m	class:Catch::StringRef
searchData	documentation/html/search/all_0.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_1.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_2.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_3.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_4.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_5.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_6.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_7.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_8.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_9.js	/^var searchData=$/;"	v
searchData	documentation/html/search/all_a.js	/^var searchData=$/;"	v
searchData	documentation/html/search/classes_0.js	/^var searchData=$/;"	v
searchData	documentation/html/search/classes_1.js	/^var searchData=$/;"	v
searchData	documentation/html/search/classes_2.js	/^var searchData=$/;"	v
searchData	documentation/html/search/classes_3.js	/^var searchData=$/;"	v
searchData	documentation/html/search/classes_4.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_0.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_1.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_2.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_3.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_4.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_5.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_6.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_7.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_8.js	/^var searchData=$/;"	v
searchData	documentation/html/search/functions_9.js	/^var searchData=$/;"	v
searchData	documentation/html/search/pages_0.js	/^var searchData=$/;"	v
searchData	documentation/html/search/related_0.js	/^var searchData=$/;"	v
searchData	documentation/html/search/related_1.js	/^var searchData=$/;"	v
setClassAttr	documentation/html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setKeyActions	documentation/html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
size	dataframe/column.cpp	/^size_t Column::size() const {$/;"	f	class:Column
size	dataframe/column.cpp	/^size_t Column::size() { return static_cast<const Column&>(*this).size(); }$/;"	f	class:Column
size	dataframe/dataframe.cpp	/^std::pair<size_t, size_t> DataFrame::size() const {$/;"	f	class:DataFrame
size	dataframe/index.h	/^    int size() {return index_positions.size();}$/;"	f	class:Index
size	dataframe/index.h	/^    int size()const {return index_positions.size();}$/;"	f	class:Index
sort_by_column	dataframe/dataframe.cpp	/^void DataFrame::sort_by_column(const std::string& s) {$/;"	f	class:DataFrame
sort_by_column_template	dataframe/dataframe.cpp	/^void DataFrame::sort_by_column_template(const string& s) {$/;"	f	class:DataFrame
sort_by_index	dataframe/dataframe.cpp	/^void DataFrame::sort_by_index() {$/;"	f	class:DataFrame
sort_df	main.cpp	/^void sort_df(DataFrame& df, const std::string& s) {$/;"	f
sort_df	old_main.cpp	/^void sort_df(DataFrame& df, const std::string& s) {$/;"	f
sort_df	save_main.cpp	/^void sort_df(DataFrame& df, const std::string& s) {$/;"	f
sort_df	test/mae_example.cpp	/^void sort_df(DataFrame& df, const std::string& s) {$/;"	f
sort_df	test/old_main.cpp	/^void sort_df(DataFrame& df, const std::string& s) {$/;"	f
sort_pairs	dataframe/ConstColumnIterator.h	/^void sort_pairs(typename std::vector<std::pair<int, T>>::iterator end,$/;"	f
string	test/catch.hpp	/^        auto str() const -> std::string;$/;"	m	class:Catch::ReusableStringStream::std
string	test/catch.hpp	/^    auto operator + ( StringRef const& lhs, StringRef const& rhs ) -> std::string;$/;"	m	class:Catch::std
string	test/catch.hpp	/^    auto operator + ( StringRef const& lhs, char const* rhs ) -> std::string;$/;"	m	class:Catch::std
string	test/catch.hpp	/^    auto operator + ( char const* lhs, StringRef const& rhs ) -> std::string;$/;"	m	class:Catch::std
string	test/catch.hpp	/^    auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;$/;"	m	class:Catch::std
stringify	test/catch.hpp	/^        inline std::string stringify( NSString* nsstring ) {$/;"	f	namespace:Catch::Detail
stringify	test/catch.hpp	/^        std::string stringify(const T& e) {$/;"	f	namespace:Catch::Detail
summarize	dataframe/grouper.cpp	/^DataFrame DataFrame::Grouper<T>::summarize(Statistic* f) {$/;"	f	class:DataFrame::Grouper
svec	dataframe/column.h	/^    typedef std::vector<std::string> svec;$/;"	t	class:Column
t0	simply_example.py	/^t0 = time.time()$/;"	v
t1	simply_example.py	/^t1 = time.time()$/;"	v
tags	test/catch.hpp	/^    StringRef tags;$/;"	m	struct:Catch::NameAndTags
texorpdfstring  append    _   missing    _   cols	documentation/latex/classColumn.tex	/^\\index{append\\+\\_\\+missing\\+\\_\\+cols@{append\\+\\_\\+missing\\+\\_\\+cols}!Column@{Column}}$/;"	b
texorpdfstring  cbegin  	documentation/latex/classDataFrame.tex	/^\\index{cbegin@{cbegin}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  cend  	documentation/latex/classDataFrame.tex	/^\\index{cend@{cend}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  convert    _   and    _   push    _   back  	documentation/latex/classColumn.tex	/^\\index{convert\\+\\_\\+and\\+\\_\\+push\\+\\_\\+back@{convert\\+\\_\\+and\\+\\_\\+push\\+\\_\\+back}!Column@{Column}}$/;"	b
texorpdfstring  find    _   column    _   position  	documentation/latex/classDataFrame.tex	/^\\index{find\\+\\_\\+column\\+\\_\\+position@{find\\+\\_\\+column\\+\\_\\+position}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  get    _   shared    _   copy  	documentation/latex/classDataFrame.tex	/^\\index{get\\+\\_\\+shared\\+\\_\\+copy@{get\\+\\_\\+shared\\+\\_\\+copy}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  get    _   unique  	documentation/latex/classDataFrame.tex	/^\\index{get\\+\\_\\+unique@{get\\+\\_\\+unique}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  initialize    _   column  	documentation/latex/classDataFrame.tex	/^\\index{initialize\\+\\_\\+column@{initialize\\+\\_\\+column}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  is    _   contigious  	documentation/latex/classDataFrame.tex	/^\\index{is\\+\\_\\+contigious@{is\\+\\_\\+contigious}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  make    _   contigious  	documentation/latex/classDataFrame.tex	/^\\index{make\\+\\_\\+contigious@{make\\+\\_\\+contigious}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  operator 	documentation/latex/classDataFrame.tex	/^\\index{operator+@{operator+}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  operator    	documentation/latex/classDataFrame.tex	/^\\index{operator+=@{operator+=}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  operator$  $	documentation/latex/classColumn.tex	/^\\index{operator$<$@{operator$<$}!Column@{Column}}$/;"	b
texorpdfstring  operator$  $	documentation/latex/classDataFrame.tex	/^\\index{operator$<$@{operator$<$}!Data\\+Frame@{Data\\+Frame}}$/;"	b
texorpdfstring  type    _   name  	documentation/latex/classColumn.tex	/^\\index{type\\+\\_\\+name@{type\\+\\_\\+name}!Column@{Column}}$/;"	b
theDataFrame	dataframe/ColumnIterator.h	/^        DataFrame& theDataFrame;$/;"	m	class:DataFrame::ColumnIterator
theDataFrame	dataframe/ConstColumnIterator.h	/^    const DataFrame& theDataFrame;$/;"	m	class:DataFrame::ConstColumnIterator
theDataFrame	dataframe/dataframeproxy.h	/^    DataFrame& theDataFrame;$/;"	m	class:DataFrame::DataFrameProxy
to_string	dataframe/ConstColumnIterator.h	/^std::string DataFrame::ConstColumnIterator<T>::to_string() {$/;"	f	class:DataFrame::ConstColumnIterator
to_string	dataframe/column.cpp	/^std::string Column::to_string(int i) const {$/;"	f	class:Column
to_string	dataframe/index.cpp	/^std::string to_string(Index::ele e) {$/;"	f
toggleFolder	documentation/html/dynsections.js	/^function toggleFolder(id)$/;"	f
toggleInherit	documentation/html/dynsections.js	/^function toggleInherit(id)$/;"	f
toggleLevel	documentation/html/dynsections.js	/^function toggleLevel(level)$/;"	f
toggleVisibility	documentation/html/dynsections.js	/^function toggleVisibility(linkObj)$/;"	f
transform_column	dataframe/column.cpp	/^vector<T> transform_column(const vector<T>* v, const T& t) {$/;"	f
type_name	dataframe/GroupbyFunctions.h	/^    std::string type_name;$/;"	m	class:Statistic
type_name	dataframe/column.cpp	/^string Column::type_name() {$/;"	f	class:Column
unique_elements	dataframe/index.cpp	/^std::set<deque<Index::ele>> Index::unique_elements() const {$/;"	f	class:Index
unique_elements	dataframe/index.cpp	/^std::set<deque<Index::ele>> Index::unique_elements() {$/;"	f	class:Index
updateStripes	documentation/html/dynsections.js	/^function updateStripes()$/;"	f
use_count	dataframe/dataframe.cpp	/^int DataFrame::use_count(const string& name) {$/;"	f	class:DataFrame
value	test/catch.hpp	/^            static const bool value = decltype(test<std::ostream, const T&>(0))::value;$/;"	m	class:Catch::Detail::IsStreamInsertable
vector_element_is_null	dataframe/column.cpp	/^bool vector_element_is_null(const T& t) {$/;"	f
volatile	build/CMakeFiles/3.10.2/CompilerIdC/CMakeCCompilerId.c	11;"	d	file:
width	dataframe/print.cpp	/^string::size_type width(vector<string>& inp) {$/;"	f
wptr	dataframe/ColumnIterator.h	/^        std::weak_ptr<Column> wptr;$/;"	m	class:DataFrame::ColumnIterator
wptr	dataframe/ConstColumnIterator.h	/^    std::weak_ptr<Column> wptr;$/;"	m	class:DataFrame::ConstColumnIterator
writeToStream	test/catch.hpp	/^        void writeToStream( std::ostream &os ) const {$/;"	f	struct:Catch::Parser
